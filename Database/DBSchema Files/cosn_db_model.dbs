<?xml version="1.0" encoding="UTF-8" ?>
<project name="MariaDb" database="MariaDb" id="MariaDb-13d6" >
	<schema name="kpc353_2" >
		<table name="content" prior="content_data" >
			<comment><![CDATA[contains the content created by members]]></comment>
			<column name="content_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="creator_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[member who created this particular piece of content]]></comment>
			</column>
			<column name="content_type" type="ENUM" jt="12" mandatory="y" >
				<enumeration><![CDATA['text','image','video']]></enumeration>
				<comment><![CDATA[what kind of content was produced]]></comment>
			</column>
			<column name="content_data" prior="content_data_url" type="TEXT" jt="-1" mandatory="y" >
				<comment><![CDATA[text or URL link to the data of the content]]></comment>
			</column>
			<column name="content_creation_date" prior="creation_date" type="DATE" jt="91" mandatory="y" >
				<defo><![CDATA[curdate()]]></defo>
				<comment><![CDATA[when was the content created]]></comment>
			</column>
			<column name="content_title" type="VARCHAR" length="100" jt="12" >
				<comment><![CDATA[title of the post of the content]]></comment>
			</column>
			<column name="moderation_status" type="ENUM" jt="12" >
				<defo><![CDATA['pending']]></defo>
				<enumeration><![CDATA['pending', 'approved', 'rejected']]></enumeration>
				<comment><![CDATA[status of the piece of content in terms of moderation]]></comment>
			</column>
			<column name="content_deleted_flag" type="BOOLEAN" jt="-7" mandatory="y" >
				<defo><![CDATA[false]]></defo>
				<comment><![CDATA[used to "delete" content by users]]></comment>
			</column>
			<index name="pk_content_data" unique="PRIMARY_KEY" >
				<column name="content_id" />
			</index>
			<index name="fk_content_members" unique="NORMAL" >
				<column name="creator_id" />
			</index>
			<fk name="fk_content_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="creator_id" pk="member_id" />
			</fk>
		</table>
		<table name="content_comment" prior="tbl" >
			<comment><![CDATA[table containing comments on content from members]]></comment>
			<column name="content_comment_id" prior="content_comment" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="commenter_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the member who made the content]]></comment>
			</column>
			<column name="comment_text" type="VARCHAR" length="250" jt="12" >
				<comment><![CDATA[the actual text of the comment on a certain piece of content]]></comment>
			</column>
			<column name="target_content_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the content which is the target of the comment]]></comment>
			</column>
			<column name="datetime_comment" type="DATETIME" jt="93" >
				<comment><![CDATA[the datetime of when the comment was created]]></comment>
			</column>
			<index name="pk_content_comment" unique="PRIMARY_KEY" >
				<column name="content_comment_id" />
			</index>
			<fk name="fk_content_comment_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="commenter_member_id" pk="member_id" />
			</fk>
			<fk name="fk_content_comment_content" to_schema="kpc353_2" to_table="content" delete_action="cascade" >
				<fk_column name="target_content_id" pk="content_id" />
			</fk>
		</table>
		<table name="content_group_permissions" prior="tbl" >
			<comment><![CDATA[table describing which groups can access to what content]]></comment>
			<column name="content_group_permission_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="target_content_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the specific piece of conent, defined by content_id on which a particular group has certain permission]]></comment>
			</column>
			<column name="target_group_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the particular group which has a certain permission on a specific content]]></comment>
			</column>
			<column name="content_group_permission_type" type="ENUM" jt="12" >
				<enumeration><![CDATA['read','comment','share','link']]></enumeration>
				<comment><![CDATA[the type of permission that a particular group has on a certain piece of content]]></comment>
			</column>
			<index name="pk_content_group_permissions" unique="PRIMARY_KEY" >
				<column name="content_group_permission_id" />
			</index>
			<index name="fk_content_group_permissions_content" unique="NORMAL" >
				<column name="target_content_id" />
			</index>
			<index name="fk_content_group_permissions_groups" unique="NORMAL" >
				<column name="target_group_id" />
			</index>
			<fk name="fk_content_group_permissions_content" to_schema="kpc353_2" to_table="content" delete_action="cascade" >
				<fk_column name="target_content_id" pk="content_id" />
			</fk>
			<fk name="fk_content_group_permissions_groups" to_schema="kpc353_2" to_table="groups" delete_action="cascade" >
				<fk_column name="target_group_id" pk="group_id" />
			</fk>
		</table>
		<table name="content_link_relationship" prior="content_" >
			<comment><![CDATA[Describes the way that content s linked between each other such as a comment to a post]]></comment>
			<column name="content_link_rel_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="origin_content_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[ContendID of the piece of content to which another piece of content is linked]]></comment>
			</column>
			<column name="target_content_id" prior="targrt_content_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[Identifies the piece of content that is linked to the origin contentID]]></comment>
			</column>
			<index name="pk_content_link_relationship" unique="PRIMARY_KEY" >
				<column name="content_link_rel_id" />
			</index>
			<index name="fk_content_link_relationship_content" unique="NORMAL" >
				<column name="origin_content_id" />
			</index>
			<index name="fk_content_link_relationship_content_0" unique="NORMAL" >
				<column name="target_content_id" />
			</index>
			<fk name="fk_content_link_relationship_content_1" to_schema="kpc353_2" to_table="content" delete_action="cascade" >
				<fk_column name="origin_content_id" pk="content_id" />
			</fk>
			<fk name="fk_content_link_relationship_content_2" to_schema="kpc353_2" to_table="content" delete_action="cascade" >
				<fk_column name="target_content_id" pk="content_id" />
			</fk>
		</table>
		<table name="content_member_permission" prior="content_permissions" >
			<comment><![CDATA[allows for setting the granular permissions to a particular piece of content, targeted at a particular member]]></comment>
			<column name="content_member_permission_id" prior="content_permission_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="target_content_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the specific piece of conent, defined by content_id on which a particular member has a certain permission]]></comment>
			</column>
			<column name="authorized_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[which member_id has a specific permission to do something with a specific content_id

authorized_member_id = 1 is "private" system member
authorized_member_id = 2 is "public" system member]]></comment>
			</column>
			<column name="content_permission_type" type="ENUM" jt="12" >
				<enumeration><![CDATA['read','edit','comment','share','modify-permission','moderate','link']]></enumeration>
				<comment><![CDATA[the type of permission that the authorized_member_id has on this particular piece of content
can be
'read','edit','comment','share','modify-permission','moderate','link']]></comment>
			</column>
			<index name="pk_content_permissions" unique="PRIMARY_KEY" >
				<column name="content_member_permission_id" />
			</index>
			<index name="fk_content_permissions_content" unique="NORMAL" >
				<column name="target_content_id" />
			</index>
			<index name="fk_content_permissions_members" unique="NORMAL" >
				<column name="authorized_member_id" />
			</index>
			<fk name="fk_content_permissions_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="authorized_member_id" pk="member_id" />
			</fk>
			<fk name="fk_content_member_permission_content" to_schema="kpc353_2" to_table="content" delete_action="cascade" >
				<fk_column name="target_content_id" pk="content_id" />
			</fk>
		</table>
		<table name="content_moderation_warning" prior="content_moderation_" >
			<comment><![CDATA[Contains the moderation warning for content posted by a member (if the content was "flagged" by a moderator]]></comment>
			<column name="content_moderation_warning_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="target_content_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[defines the particular piece of content that has been flagged by a moderator]]></comment>
			</column>
			<column name="owner_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[member responsible for posting a flagged content]]></comment>
			</column>
			<column name="moderator_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[ID of a moderator who flagged the particular piece of content]]></comment>
			</column>
			<index name="pk_content_moderation_warning" unique="PRIMARY_KEY" >
				<column name="content_moderation_warning_id" />
			</index>
			<index name="fk_content_moderation_warning_content" unique="NORMAL" >
				<column name="target_content_id" />
			</index>
			<index name="fk_content_moderation_warning_content_0" unique="NORMAL" >
				<column name="owner_member_id" />
			</index>
			<index name="fk_content_moderation_warning_members" unique="NORMAL" >
				<column name="moderator_member_id" />
			</index>
			<fk name="fk_content_moderation_warning_content" to_schema="kpc353_2" to_table="content" delete_action="cascade" >
				<fk_column name="target_content_id" pk="content_id" />
			</fk>
			<fk name="fk_content_moderation_warning_content_0" to_schema="kpc353_2" to_table="content" delete_action="cascade" >
				<fk_column name="owner_member_id" pk="creator_id" />
			</fk>
			<fk name="fk_content_moderation_warning_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="moderator_member_id" pk="member_id" />
			</fk>
		</table>
		<table name="content_public_permissions" prior="content_public_permission" >
			<comment><![CDATA[Defines which content is public]]></comment>
			<column name="content_public_permission_id" prior="content_public_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
				<comment><![CDATA[The synthetic PK (surrogate key)]]></comment>
			</column>
			<column name="target_content_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the specific piece of conent, defined by content_id on which the public has certain permission]]></comment>
			</column>
			<column name="content_public_permission_type" type="ENUM" jt="12" >
				<enumeration><![CDATA['read','comment','share','link']]></enumeration>
				<comment><![CDATA[the type of permission that the public has on this particular piece of content
can be
'read','comment','share','link']]></comment>
			</column>
			<index name="pk_content_public" unique="PRIMARY_KEY" >
				<column name="content_public_permission_id" />
			</index>
			<index name="fk_content_public_permissions_content" unique="NORMAL" >
				<column name="target_content_id" />
			</index>
			<fk name="fk_content_public_permissions_content" to_schema="kpc353_2" to_table="content" delete_action="cascade" >
				<fk_column name="target_content_id" pk="content_id" />
			</fk>
		</table>
		<table name="gift_registry" prior="tbl" >
			<comment><![CDATA[Describes gift registry entity that different members can attach gift ideas to.]]></comment>
			<column name="gift_registry_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="organizer_member_id" prior="organized_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[ID of a particular gift registry organizer]]></comment>
			</column>
			<column name="gift_registry_description" type="VARCHAR" length="100" jt="12" >
				<comment><![CDATA[Description for the particular gift registry]]></comment>
			</column>
			<column name="gift_registry_name" type="VARCHAR" length="100" jt="12" >
				<comment><![CDATA[name of the particular registry]]></comment>
			</column>
			<index name="pk_gift_registry" unique="PRIMARY_KEY" >
				<column name="gift_registry_id" />
			</index>
			<index name="fk_gift_registry_members" unique="NORMAL" >
				<column name="organizer_member_id" />
			</index>
			<fk name="fk_gift_registry_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="organizer_member_id" pk="member_id" />
			</fk>
		</table>
		<table name="gift_registry_gifts" prior="tbl" >
			<comment><![CDATA[contains gifts sent from gift registry]]></comment>
			<column name="gift_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="target_gift_registry_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the gift registry from which the gift is taken]]></comment>
			</column>
			<column name="gift_registry_idea_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[target gift idea from a specific gift registry]]></comment>
			</column>
			<column name="sender_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the member who is sending the gift]]></comment>
			</column>
			<column name="target_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the member who will receive the gift]]></comment>
			</column>
			<column name="gift_status" type="ENUM" jt="12" mandatory="y" >
				<defo><![CDATA['pending']]></defo>
				<enumeration><![CDATA['pending','sent','received']]></enumeration>
				<comment><![CDATA[the status of the gift transaction]]></comment>
			</column>
			<column name="gift_date" type="DATETIME" jt="93" mandatory="y" >
				<defo><![CDATA[CURRENT_TIMESTAMP]]></defo>
				<comment><![CDATA[the datetime when the gift was sent out]]></comment>
			</column>
			<index name="pk_gift_registry_gifts" unique="PRIMARY_KEY" >
				<column name="gift_id" />
			</index>
			<fk name="fk_gift_registry_gifts_gift_registry" to_schema="kpc353_2" to_table="gift_registry" delete_action="cascade" >
				<fk_column name="target_gift_registry_id" pk="gift_registry_id" />
			</fk>
			<fk name="fk_gift_registry_gifts_gift_registry_ideas" to_schema="kpc353_2" to_table="gift_registry_ideas" delete_action="cascade" >
				<fk_column name="gift_registry_idea_id" pk="gift_registry_ideas_id" />
			</fk>
			<fk name="fk_gift_registry_gifts_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="sender_member_id" pk="member_id" />
			</fk>
			<fk name="fk_gift_registry_gifts_members_0" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="target_member_id" pk="member_id" />
			</fk>
		</table>
		<table name="gift_registry_ideas" prior="gift_registr" >
			<comment><![CDATA[describes gift ideas for a particular registry]]></comment>
			<column name="gift_registry_ideas_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="target_gift_registry_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[describes which particular gift registry a gift idea applies to]]></comment>
			</column>
			<column name="idea_owner_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[ID of a member proposing a particullar gift]]></comment>
			</column>
			<column name="gift_idea_description" type="VARCHAR" length="200" jt="12" mandatory="y" >
				<comment><![CDATA[description of a proposed gift]]></comment>
			</column>
			<index name="pk_gift_registry_ideas" unique="PRIMARY_KEY" >
				<column name="gift_registry_ideas_id" />
			</index>
			<index name="fk_gift_registry_ideas_gift_registry" unique="NORMAL" >
				<column name="target_gift_registry_id" />
			</index>
			<index name="fk_gift_registry_ideas_gift_registry_participants" unique="NORMAL" >
				<column name="idea_owner_id" />
			</index>
			<fk name="fk_gift_registry_ideas_gift_registry_0" to_schema="kpc353_2" to_table="gift_registry" delete_action="cascade" >
				<fk_column name="target_gift_registry_id" pk="gift_registry_id" />
			</fk>
			<fk name="fk_gift_registry_ideas_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="idea_owner_id" pk="member_id" />
			</fk>
		</table>
		<table name="gift_registry_participants" prior="tbl" >
			<comment><![CDATA[Contains the participants of a particular gift registry]]></comment>
			<column name="gift_registry_participants_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="participant_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[ID of a participant of the registry]]></comment>
			</column>
			<column name="target_gift_registry_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[describes a particular gift registry that a member is part of]]></comment>
			</column>
			<index name="pk_gift_registry_participants" unique="PRIMARY_KEY" >
				<column name="gift_registry_participants_id" />
			</index>
			<index name="fk_gift_registry_participants_gift_registry" unique="NORMAL" >
				<column name="target_gift_registry_id" />
			</index>
			<index name="fk_gift_registry_participants_members" unique="NORMAL" >
				<column name="participant_member_id" />
			</index>
			<fk name="fk_gift_registry_participants_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="participant_member_id" pk="member_id" />
			</fk>
			<fk name="fk_gift_registry_participants_gift_registry" to_schema="kpc353_2" to_table="gift_registry" delete_action="cascade" >
				<fk_column name="target_gift_registry_id" pk="gift_registry_id" />
			</fk>
		</table>
		<table name="gift_registry_permissions" prior="gifr_registry_permissions" >
			<comment><![CDATA[contains the permissions that members have on a gift registry]]></comment>
			<column name="gift_registry_permissions_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="target_gift_registry_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[The target ID of the gift registry on which a particular members pemission is defined]]></comment>
			</column>
			<column name="authorized_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the ID of the member that has a certain permission on a certain gift registry]]></comment>
			</column>
			<column name="gift_registry_permission_type" type="ENUM" jt="12" >
				<enumeration><![CDATA['view', 'edit', 'add-item']]></enumeration>
				<comment><![CDATA[the type of permission that a certain member has on a certain gift registry

can be 'view', 'edit', 'add-item']]></comment>
			</column>
			<index name="pk_gift_registry_permissions" unique="PRIMARY_KEY" >
				<column name="gift_registry_permissions_id" />
			</index>
			<fk name="fk_gift_registry_permissions_gift_registry" to_schema="kpc353_2" to_table="gift_registry" delete_action="cascade" >
				<fk_column name="target_gift_registry_id" pk="gift_registry_id" />
			</fk>
			<fk name="fk_gift_registry_permissions_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="authorized_member_id" pk="member_id" />
			</fk>
		</table>
		<table name="group_event" prior="event" >
			<comment><![CDATA[contains the events organized for particular groups]]></comment>
			<column name="group_event_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="target_group_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[Group for which a particular event is organized]]></comment>
			</column>
			<column name="event_organizer_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[ID of a member who is organizing a particular event]]></comment>
			</column>
			<column name="event_name" type="VARCHAR" length="100" jt="12" mandatory="y" >
				<comment><![CDATA[Name of the particular event being organized]]></comment>
			</column>
			<index name="pk_group_event" unique="PRIMARY_KEY" >
				<column name="group_event_id" />
			</index>
			<index name="fk_group_event_groups" unique="NORMAL" >
				<column name="target_group_id" />
			</index>
			<index name="fk_group_event_members" unique="NORMAL" >
				<column name="event_organizer_member_id" />
			</index>
			<fk name="fk_group_event_groups" to_schema="kpc353_2" to_table="groups" delete_action="cascade" >
				<fk_column name="target_group_id" pk="group_id" />
			</fk>
			<fk name="fk_group_event_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="event_organizer_member_id" pk="member_id" />
			</fk>
		</table>
		<table name="group_event_option_vote" prior="tbl" >
			<comment><![CDATA[contains the voting results of a particular member for a particular event option proposed]]></comment>
			<column name="group_event_option_vote_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="target_group_event_option_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[ID of the option of proposed date/time/place for a particular event]]></comment>
			</column>
			<column name="option_voter_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[ID of the member who is voting on a particular option]]></comment>
			</column>
			<column name="option_voting_decision" type="BOOLEAN" jt="-7" >
				<comment><![CDATA[describes the decision of a particular member regarding the proposed date/time/place for an event (true = support for the option)]]></comment>
			</column>
			<index name="pk_group_event_option_vote" unique="PRIMARY_KEY" >
				<column name="group_event_option_vote_id" />
			</index>
			<index name="fk_group_event_option_vote_group_event_options" unique="NORMAL" >
				<column name="target_group_event_option_id" />
			</index>
			<index name="fk_group_event_option_vote_members" unique="NORMAL" >
				<column name="option_voter_member_id" />
			</index>
			<fk name="fk_group_event_option_vote_group_event_options" to_schema="kpc353_2" to_table="group_event_options" delete_action="cascade" >
				<fk_column name="target_group_event_option_id" pk="group_event_options_id" />
			</fk>
			<fk name="fk_group_event_option_vote_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="option_voter_member_id" pk="member_id" />
			</fk>
		</table>
		<table name="group_event_options" prior="group_event_" >
			<comment><![CDATA[describes the proposed options for a particular group event]]></comment>
			<column name="group_event_options_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="target_group_event_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[describes a particular group event ID on which a particular time/place/date option applies]]></comment>
			</column>
			<column name="option_owner_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[ID of the member proposing a particular option of date/time/place for the event]]></comment>
			</column>
			<column name="option_description" type="VARCHAR" length="100" jt="12" mandatory="y" >
				<comment><![CDATA[describes the details of the proposed option for date/time/place
Ex: "Alaska, 2025-01-01, 07:00"]]></comment>
			</column>
			<index name="pk_group_event_options" unique="PRIMARY_KEY" >
				<column name="group_event_options_id" />
			</index>
			<index name="fk_group_event_options_group_event" unique="NORMAL" >
				<column name="target_group_event_id" />
			</index>
			<index name="fk_group_event_options_members" unique="NORMAL" >
				<column name="option_owner_member_id" />
			</index>
			<fk name="fk_group_event_options_group_event" to_schema="kpc353_2" to_table="group_event" delete_action="cascade" >
				<fk_column name="target_group_event_id" pk="group_event_id" />
			</fk>
			<fk name="fk_group_event_options_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="option_owner_member_id" pk="member_id" />
			</fk>
		</table>
		<table name="group_members" prior="tbl" >
			<comment><![CDATA[Mapping between members and groups, each row telling us which member belongs to which group]]></comment>
			<column name="group_membership_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="participant_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the member_id of the participant of this group]]></comment>
			</column>
			<column name="joined_group_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the ID of a particular group, that a particular member has joined]]></comment>
			</column>
			<column name="date_joined" type="DATE" jt="91" mandatory="y" >
				<defo><![CDATA[CURRENT_DATE]]></defo>
				<comment><![CDATA[the date when a particular member has joned a particular group]]></comment>
			</column>
			<column name="group_member_status" prior="role_of_member" type="ENUM" jt="12" >
				<defo><![CDATA['member']]></defo>
				<enumeration><![CDATA['member','admin','requested','ban']]></enumeration>
				<comment><![CDATA[the status of a particular member in a particular group
can be either 'admin', 'member', 'requested, 'ban']]></comment>
			</column>
			<index name="pk_group_members" unique="PRIMARY_KEY" >
				<column name="group_membership_id" />
			</index>
			<index name="fk_group_members_members" unique="NORMAL" >
				<column name="participant_member_id" />
			</index>
			<index name="fk_group_members_groups" unique="NORMAL" >
				<column name="joined_group_id" />
			</index>
			<fk name="fk_group_members_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="participant_member_id" pk="member_id" />
			</fk>
			<fk name="fk_group_members_groups" to_schema="kpc353_2" to_table="groups" delete_action="cascade" >
				<fk_column name="joined_group_id" pk="group_id" />
			</fk>
		</table>
		<table name="group_vote_plebiscite" prior="group_vote_plebicsite" >
			<comment><![CDATA[Contains the plebiscite organized to oust a non-person (corporate) member.]]></comment>
			<column name="group_vote_plebiscite_id" prior="gropup_vote_plebiscite_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="target_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[ID of a member being ousted]]></comment>
			</column>
			<column name="organizer_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[ID of the organizer of the plebiscite]]></comment>
			</column>
			<column name="target_group_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[Group from which the non-person member is being ousted.]]></comment>
			</column>
			<index name="pk_group_vote_plebiscite" unique="PRIMARY_KEY" >
				<column name="group_vote_plebiscite_id" />
			</index>
			<index name="fk_group_vote_plebiscite_groups" unique="NORMAL" >
				<column name="target_group_id" />
			</index>
			<index name="fk_group_vote_plebiscite_members" unique="NORMAL" >
				<column name="target_member_id" />
			</index>
			<index name="fk_group_vote_plebiscite_members_0" unique="NORMAL" >
				<column name="organizer_member_id" />
			</index>
			<fk name="fk_group_vote_plebiscite_groups" to_schema="kpc353_2" to_table="groups" delete_action="cascade" >
				<fk_column name="target_group_id" pk="group_id" />
			</fk>
			<fk name="fk_group_vote_plebiscite_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="target_member_id" pk="member_id" />
			</fk>
			<fk name="fk_group_vote_plebiscite_members_0" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="organizer_member_id" pk="member_id" />
			</fk>
		</table>
		<table name="group_vote_plebiscite_results" prior="group_vote" >
			<comment><![CDATA[Results of the plebiscite]]></comment>
			<column name="group_vote_plebiscite_results_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="target_group_vote_plebiscite_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[ID of the plebiscite.]]></comment>
			</column>
			<column name="voter_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[ID of the voting member on this particular plebiscite]]></comment>
			</column>
			<column name="voting_decision" type="BOOLEAN" jt="-7" mandatory="y" >
				<comment><![CDATA[describes the decision of a particular member in the plebiscite vote (voting decision = true, meaning in favour of ousting)]]></comment>
			</column>
			<index name="pk_group_vote_plebiscite_results" unique="PRIMARY_KEY" >
				<column name="group_vote_plebiscite_results_id" />
			</index>
			<index name="fk_group_vote_plebiscite_results_members" unique="NORMAL" >
				<column name="voter_member_id" />
			</index>
			<index name="fk_group_vote_plebiscite_results_group_vote_plebiscite" unique="NORMAL" >
				<column name="target_group_vote_plebiscite_id" />
			</index>
			<fk name="fk_group_vote_plebiscite_results_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="voter_member_id" pk="member_id" />
			</fk>
			<fk name="fk_group_vote_plebiscite_results_group_vote_plebiscite" to_schema="kpc353_2" to_table="group_vote_plebiscite" delete_action="cascade" >
				<fk_column name="target_group_vote_plebiscite_id" pk="group_vote_plebiscite_id" />
			</fk>
		</table>
		<table name="groups" spec="" >
			<comment><![CDATA[Contains the information about the groups, such as their description, who created them, etc]]></comment>
			<column name="group_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="group_name" type="VARCHAR" length="100" jt="12" mandatory="y" />
			<column name="owner_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[ID of the member who created a particular group]]></comment>
			</column>
			<column name="description" type="TEXT" jt="-1" >
				<comment><![CDATA[Description of the group, their interests, etc]]></comment>
			</column>
			<column name="creation_date" type="DATE" jt="91" >
				<defo><![CDATA[current_timestamp()]]></defo>
				<comment><![CDATA[Date when group was created]]></comment>
			</column>
			<column name="category" prior="cathegory" type="VARCHAR" length="100" jt="12" >
				<comment><![CDATA[defines the different categories]]></comment>
			</column>
			<index name="pk_groups" unique="PRIMARY_KEY" >
				<column name="group_id" />
			</index>
			<index name="fk_groups_members" unique="NORMAL" >
				<column name="owner_id" />
			</index>
			<fk name="fk_groups_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="owner_id" pk="member_id" />
			</fk>
		</table>
		<table name="member_messages" prior="tbl" >
			<comment><![CDATA[table containing the messages that members send between each others]]></comment>
			<column name="member_message_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="origin_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the member_id from who the message is sent FROM]]></comment>
			</column>
			<column name="target_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[member_id that receives the message]]></comment>
			</column>
			<column name="message_content" type="TEXT" jt="-1" >
				<comment><![CDATA[the actual content of the message]]></comment>
			</column>
			<index name="pk_member_messages" unique="PRIMARY_KEY" >
				<column name="member_message_id" />
			</index>
			<index name="fk_member_messages_members" unique="NORMAL" >
				<column name="origin_member_id" />
			</index>
			<index name="fk_member_messages_members_0" unique="NORMAL" >
				<column name="target_member_id" />
			</index>
			<fk name="fk_member_messages_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="origin_member_id" pk="member_id" />
			</fk>
			<fk name="fk_member_messages_members_0" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="target_member_id" pk="member_id" />
			</fk>
		</table>
		<table name="member_privilege_change_request" prior="member_privilege" >
			<comment><![CDATA[Contains the privilege change request of a member, for example - a junior to senior member]]></comment>
			<column name="member_privilege_change_request_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="target_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[The ID of the member who is requesting the change]]></comment>
			</column>
			<column name="requested_privilege_level" type="ENUM" jt="12" >
				<enumeration><![CDATA['senior']]></enumeration>
				<comment><![CDATA[desired privilege level for the tardet_member_id]]></comment>
			</column>
			<index name="pk_member_privilege_change_request" unique="PRIMARY_KEY" >
				<column name="member_privilege_change_request_id" />
			</index>
			<index name="fk_member_privilege_change_request_members" unique="NORMAL" >
				<column name="target_member_id" />
			</index>
			<fk name="fk_member_privilege_change_request_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="target_member_id" pk="member_id" />
			</fk>
		</table>
		<table name="member_relationships" prior="tbl" >
			<comment><![CDATA[describes the relationships of the members, specifically if they are friends, family, colleagues or blocked]]></comment>
			<column name="relationship_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="origin_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the member from whom the relationship originates, for example the origin_member_id has REQUESTED a target_member_id to be friends]]></comment>
			</column>
			<column name="target_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the member to whom the origin_member is connected]]></comment>
			</column>
			<column name="member_relationship_type" prior="relationship_type" type="ENUM" jt="12" mandatory="y" >
				<enumeration><![CDATA['friend','family','colleague','blocked']]></enumeration>
				<comment><![CDATA[The type of relationship can be 'friend, 'family', 'colleague' or 'blocked']]></comment>
			</column>
			<column name="member_relationship_status" type="ENUM" jt="12" >
				<enumeration><![CDATA['requested','approved','rejected','blocked']]></enumeration>
				<comment><![CDATA[used to represent the evolution of the relationship from, specifically from a friend/family/colleage request to an actual confirmed relationship]]></comment>
			</column>
			<index name="pk_member_relationships" unique="PRIMARY_KEY" >
				<column name="relationship_id" />
			</index>
			<index name="fk_member_relationships_members" unique="NORMAL" >
				<column name="origin_member_id" />
			</index>
			<index name="fk_member_relationships_members_0" unique="NORMAL" >
				<column name="target_member_id" />
			</index>
			<fk name="fk_member_relationships_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="origin_member_id" pk="member_id" />
			</fk>
			<fk name="fk_member_relationships_members_0" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="target_member_id" pk="member_id" />
			</fk>
		</table>
		<table name="members" prior="member" spec="" >
			<comment><![CDATA[contains the info for every member of COSN]]></comment>
			<column name="member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
				<comment><![CDATA[member_id = 1 is "private" system member
member_id = 2 is "public" system member]]></comment>
			</column>
			<column name="username" type="VARCHAR" length="100" jt="12" mandatory="y" >
				<comment><![CDATA[public facing user's name (pseudonym)]]></comment>
			</column>
			<column name="password" type="VARCHAR" length="50" jt="12" mandatory="y" >
				<comment><![CDATA[password of the user

Mandatory (not null), for enabling the correct system functionality.]]></comment>
			</column>
			<column name="email" type="VARCHAR" length="50" jt="12" mandatory="y" >
				<comment><![CDATA[email of the user

Mandatory (not null), for identity verification purpose.]]></comment>
			</column>
			<column name="first_name" type="VARCHAR" length="100" jt="12" mandatory="y" >
				<comment><![CDATA[Mandatory (not null), for identity verification purpose.]]></comment>
			</column>
			<column name="last_name" type="VARCHAR" length="100" jt="12" mandatory="y" >
				<comment><![CDATA[Mandatory (not null), for identity verification purpose.]]></comment>
			</column>
			<column name="address" type="VARCHAR" length="100" jt="12" >
				<comment><![CDATA[address of the user.
Mandatory (not null), for identity verification purpose.]]></comment>
			</column>
			<column name="date_of_birth" prior="dob" type="DATE" jt="91" >
				<comment><![CDATA[date of birth of the user.
Mandatory (not null), for identity verification purpose.]]></comment>
			</column>
			<column name="privilege_level" prior="privilege" type="ENUM" jt="12" mandatory="y" >
				<defo><![CDATA['junior']]></defo>
				<enumeration><![CDATA['administrator','senior','junior']]></enumeration>
				<comment><![CDATA[privilege status of a group member (administrator, senior, junior)

Mandatory (not null), for enabling the correct system functionality.]]></comment>
			</column>
			<column name="status" type="ENUM" jt="12" mandatory="y" >
				<defo><![CDATA['active']]></defo>
				<enumeration><![CDATA['active','inactive','suspended']]></enumeration>
				<comment><![CDATA[the 'system' status is used for internal backend representation of "public" and "private" members]]></comment>
			</column>
			<column name="corporation_flag" type="BOOLEAN" jt="-7" mandatory="y" >
				<defo><![CDATA[false]]></defo>
				<comment><![CDATA[Defines whether the member is a corporation (corporation_flag = true) or an actual person (corporation_flag = false).]]></comment>
			</column>
			<index name="pk_member" unique="PRIMARY_KEY" >
				<column name="member_id" />
			</index>
		</table>
		<table name="personal_info_permissions" prior="personal_info_visibility" >
			<comment><![CDATA[Contains the mapping for 'member-specific' permissions (visibility) of private information.

Allows a particular piece of personal information, for a particular member, to be rendered visible to a particular set of other members. The set of other members can be constructed by the applicaton in the "shape" of a family, friends or groups, by simply inserting the needed member_id to the authorized_member_id.]]></comment>
			<column name="personal_info_permission_id" prior="personal_info_visiblity_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="owner_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the membeer_id of the owner of this personal information]]></comment>
			</column>
			<column name="personal_info_type" type="ENUM" jt="12" mandatory="y" >
				<enumeration><![CDATA['first_name','last_name','date_of_birth','address','email']]></enumeration>
			</column>
			<column name="authorized_member_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<comment><![CDATA[the member_id that is authorized to view this particular personal information, of a particular member

authorized_member_id = 1, it is visible to the "private" system member
authorized_member_id = 2, it is visible to the "public" system member]]></comment>
			</column>
			<index name="pk_private_info_visibility" unique="PRIMARY_KEY" >
				<column name="personal_info_permission_id" />
			</index>
			<index name="fk_personal_info_visibility_member" unique="NORMAL" >
				<column name="owner_member_id" />
			</index>
			<index name="fk_personal_info_visibility_member_0" unique="NORMAL" >
				<column name="authorized_member_id" />
			</index>
			<fk name="fk_personal_info_visibility_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="owner_member_id" pk="member_id" />
			</fk>
			<fk name="fk_personal_info_visibility_members_0" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="authorized_member_id" pk="member_id" />
			</fk>
		</table>
		<table name="personal_info_public_permissions" prior="tbl" >
			<column name="personal_info_public_permission_id" type="INT" jt="4" mandatory="y" unsigned="y" >
				<identity><![CDATA[AUTO_INCREMENT ]]></identity>
			</column>
			<column name="owner_member_id" type="INT" jt="4" mandatory="y" unsigned="y" />
			<column name="personal_info_type" type="ENUM" jt="12" >
				<enumeration><![CDATA['first_name','last_name','date_of_birth','address','email']]></enumeration>
			</column>
			<index name="pk_personal_info_public_permissions" unique="PRIMARY_KEY" >
				<column name="personal_info_public_permission_id" />
			</index>
			<index name="fk_personal_info_public_permissions_members" unique="NORMAL" >
				<column name="owner_member_id" />
			</index>
			<fk name="fk_personal_info_public_permissions_members" to_schema="kpc353_2" to_table="members" delete_action="cascade" >
				<fk_column name="owner_member_id" pk="member_id" />
			</fk>
		</table>
	</schema>
	<layout name="Main Layout" id="Layout-4cc" show_relation="columns" >
		<comment><![CDATA[COSN schema]]></comment>
		<entity schema="kpc353_2" name="content" color="E5C1EE" x="864" y="352" />
		<entity schema="kpc353_2" name="content_comment" color="E5C1EE" x="1424" y="240" />
		<entity schema="kpc353_2" name="content_group_permissions" color="E5C1EE" x="672" y="160" />
		<entity schema="kpc353_2" name="content_link_relationship" color="E5C1EE" x="1152" y="144" />
		<entity schema="kpc353_2" name="content_member_permission" color="E5C1EE" x="1280" y="512" />
		<entity schema="kpc353_2" name="content_moderation_warning" color="E5C1EE" x="912" y="48" />
		<entity schema="kpc353_2" name="content_public_permissions" color="E5C1EE" x="1184" y="368" />
		<entity schema="kpc353_2" name="gift_registry" color="EED5C1" x="1296" y="672" />
		<entity schema="kpc353_2" name="gift_registry_gifts" color="EED5C1" x="1392" y="960" />
		<entity schema="kpc353_2" name="gift_registry_ideas" color="EED5C1" x="1632" y="640" />
		<entity schema="kpc353_2" name="gift_registry_participants" color="EED5C1" x="1296" y="832" />
		<entity schema="kpc353_2" name="gift_registry_permissions" color="EED5C1" x="1632" y="864" />
		<entity schema="kpc353_2" name="group_event" color="C1D8EE" x="48" y="576" />
		<entity schema="kpc353_2" name="group_event_option_vote" color="C1D8EE" x="64" y="896" />
		<entity schema="kpc353_2" name="group_event_options" color="C1D8EE" x="64" y="736" />
		<entity schema="kpc353_2" name="group_members" color="C1D8EE" x="320" y="640" />
		<entity schema="kpc353_2" name="group_vote_plebiscite" color="C1D8EE" x="208" y="240" />
		<entity schema="kpc353_2" name="group_vote_plebiscite_results" color="C1D8EE" x="112" y="416" />
		<entity schema="kpc353_2" name="groups" color="C1D8EE" x="448" y="352" />
		<entity schema="kpc353_2" name="member_messages" color="E5EEC1" x="1024" y="864" />
		<entity schema="kpc353_2" name="member_privilege_change_request" color="E5EEC1" x="640" y="912" />
		<entity schema="kpc353_2" name="member_relationships" color="E5EEC1" x="336" y="816" />
		<entity schema="kpc353_2" name="members" color="E5EEC1" x="656" y="512" />
		<entity schema="kpc353_2" name="personal_info_permissions" color="E5EEC1" x="1008" y="608" />
		<entity schema="kpc353_2" name="personal_info_public_permissions" color="E5EEC1" x="1008" y="736" />
		<script name="SQL_Editor" id="Editor-b3c" language="SQL" >
			<string><![CDATA[CREATE SCHEMA cosn;

CREATE  TABLE cosn.content_public_permissions ( 
	content_public_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	content_public_permission_type ENUM('read','comment','share','link')       ,
	CONSTRAINT unq_content_public_permissions_target_content_id UNIQUE ( target_content_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.members ( 
	member_id            INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	username             VARCHAR(100)    NOT NULL   ,
	password             VARCHAR(50)    NOT NULL   ,
	email                VARCHAR(50)    NOT NULL   ,
	first_name           VARCHAR(100)    NOT NULL   ,
	last_name            VARCHAR(100)    NOT NULL   ,
	address              VARCHAR(100)       ,
	date_of_birth        DATE       ,
	privilege_level      ENUM('administrator','senior','junior')  DEFAULT 'junior'  NOT NULL   ,
	pseudonym            VARCHAR(50)       ,
	`status`             ENUM('active','inactive','suspended')  DEFAULT 'active'  NOT NULL   ,
	corporation_flag     BOOLEAN    NOT NULL   
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE  TABLE cosn.personal_info_permissions ( 
	personal_info_permission_id INT UNSIGNED   NOT NULL   PRIMARY KEY,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	personal_info_type   ENUM('first_name','last_name','date_of_birth','address','pseudonym','email')    NOT NULL   ,
	authorized_member_id INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_personal_info_visibility_member ON cosn.personal_info_permissions ( owner_member_id );

CREATE INDEX fk_personal_info_visibility_member_0 ON cosn.personal_info_permissions ( authorized_member_id );

CREATE  TABLE cosn.personal_info_public_permissions ( 
	personal_info_public_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	personal_info_type   ENUM('first_name','last_name','date_of_birth','address','pseudonym','email')       
 ) engine=InnoDB;

CREATE INDEX fk_personal_info_public_permissions_members ON cosn.personal_info_public_permissions ( owner_member_id );

CREATE  TABLE cosn.gift_registry ( 
	gift_registry_id     INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	organizer_member_id  INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.gift_registry_participants ( 
	gift_registry_participants_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	participant_member_id INT UNSIGNED   NOT NULL   ,
	target_gift_registry_id INT UNSIGNED   NOT NULL   ,
	CONSTRAINT unq_gift_registry_participants_participant_member_id UNIQUE ( participant_member_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.groups ( 
	group_id             INT UNSIGNED   NOT NULL   PRIMARY KEY,
	group_name           VARCHAR(100)    NOT NULL   ,
	owner_id             INT UNSIGNED      ,
	description          TEXT       ,
	creation_date        DATE  DEFAULT current_timestamp()     ,
	cathegory            VARCHAR(100)       
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX fk_groups_members ON cosn.groups ( owner_id );

CREATE  TABLE cosn.member_messages ( 
	member_message_id    INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	origin_member_id     INT UNSIGNED   NOT NULL   ,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	message_content      TEXT       ,
	CONSTRAINT unq_member_messages_origin_member_id UNIQUE ( origin_member_id ) ,
	CONSTRAINT unq_member_messages_target_member_id UNIQUE ( target_member_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.member_privilege_change_request ( 
	member_privilege_change_request_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	requested_privilege_level ENUM('senior')       
 ) engine=InnoDB;

CREATE  TABLE cosn.member_relationships ( 
	relationship_id      INT UNSIGNED   NOT NULL   PRIMARY KEY,
	origin_member_id     INT UNSIGNED   NOT NULL   ,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	member_relationship_type ENUM('friend','family','colleague','blocked')    NOT NULL   ,
	member_relationship_status ENUM('requested','approved','rejected')       
 ) engine=InnoDB;

CREATE INDEX fk_member_relationships_members ON cosn.member_relationships ( origin_member_id );

CREATE INDEX fk_member_relationships_members_0 ON cosn.member_relationships ( target_member_id );

CREATE  TABLE cosn.content_group_permissions ( 
	content_group_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED   NOT NULL   ,
	target_group_id      INT UNSIGNED   NOT NULL   ,
	content_group_permission_type ENUM('read','comment','share','link')       ,
	CONSTRAINT unq_content_group_permissions_target_content_id UNIQUE ( target_content_id ) 
 ) engine=InnoDB;

CREATE INDEX fk_content_group_permissions_groups ON cosn.content_group_permissions ( target_group_id );

CREATE  TABLE cosn.gift_registry_ideas ( 
	gift_registry_ideas_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_gift_registry_id INT UNSIGNED   NOT NULL   ,
	idea_owner_id        INT UNSIGNED   NOT NULL   ,
	gift_idea_description VARCHAR(200)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event ( 
	group_event_id       INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_id      INT UNSIGNED   NOT NULL   ,
	event_organizer_member_id INT UNSIGNED   NOT NULL   ,
	event_name           VARCHAR(100)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event_options ( 
	group_event_options_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_event_id INT UNSIGNED   NOT NULL   ,
	option_owner_member_id INT UNSIGNED   NOT NULL   ,
	option_description   VARCHAR(100)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_members ( 
	group_membership_id  INT UNSIGNED   NOT NULL   PRIMARY KEY,
	participant_member_id INT UNSIGNED   NOT NULL   ,
	joined_group_id      INT UNSIGNED   NOT NULL   ,
	date_joined          DATE    NOT NULL   ,
	role_of_member       ENUM('member','owner')  DEFAULT 'member'     
 ) engine=InnoDB;

CREATE INDEX fk_group_members_members ON cosn.group_members ( participant_member_id );

CREATE INDEX fk_group_members_groups ON cosn.group_members ( joined_group_id );

CREATE  TABLE cosn.group_vote_plebiscite ( 
	group_vote_plebiscite_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_member_id     INT UNSIGNED      ,
	organizer_member_id  INT UNSIGNED      ,
	target_group_id      INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_vote_plebiscite_results ( 
	group_vote_plebiscite_results_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_vote_plebiscite_id INT UNSIGNED   NOT NULL   ,
	voter_member_id      INT UNSIGNED   NOT NULL   ,
	voting_decision      BOOLEAN    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.content ( 
	content_id           INT UNSIGNED   NOT NULL   PRIMARY KEY,
	creator_id           INT UNSIGNED   NOT NULL   ,
	content_type         ENUM('text','image','video')    NOT NULL   ,
	content_data         TEXT    NOT NULL   ,
	content_creation_date DATE  DEFAULT curdate()  NOT NULL   ,
	content_title        VARCHAR(100)       ,
	moderation_status    ENUM('pending', 'approved', 'rejected')  DEFAULT 'pending'     
 ) engine=InnoDB;

CREATE INDEX fk_content_members ON cosn.content ( creator_id );

CREATE  TABLE cosn.content_link_relationship ( 
	content_link_rel_id  INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	origin_content_id    INT UNSIGNED      ,
	target_content_id    INT UNSIGNED      
 ) engine=InnoDB;

CREATE INDEX fk_content_link_relationship_content ON cosn.content_link_relationship ( origin_content_id );

CREATE INDEX fk_content_link_relationship_content_0 ON cosn.content_link_relationship ( target_content_id );

CREATE  TABLE cosn.content_member_permission ( 
	content_member_permission_id INT UNSIGNED   NOT NULL   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	authorized_member_id INT UNSIGNED      ,
	content_permission_type ENUM('read','edit','comment','share','modify-permission','moderate','link')       
 ) engine=InnoDB;

CREATE INDEX fk_content_permissions_content ON cosn.content_member_permission ( target_content_id );

CREATE INDEX fk_content_permissions_members ON cosn.content_member_permission ( authorized_member_id );

CREATE  TABLE cosn.content_moderation_warning ( 
	content_moderation_warning_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED   NOT NULL   ,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	moderator_member_id  INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event_option_vote ( 
	group_event_option_vote_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_event_option_id INT UNSIGNED   NOT NULL   ,
	option_voter_member_id INT UNSIGNED   NOT NULL   ,
	option_voting_decision BOOLEAN       
 ) engine=InnoDB;

ALTER TABLE cosn.content ADD CONSTRAINT fk_content_members FOREIGN KEY ( creator_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content ADD CONSTRAINT fk_content_content_public_permissions FOREIGN KEY ( content_id ) REFERENCES cosn.content_public_permissions( target_content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content ADD CONSTRAINT fk_content_content_group_permissions FOREIGN KEY ( content_id ) REFERENCES cosn.content_group_permissions( target_content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_group_permissions ADD CONSTRAINT fk_content_group_permissions_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_link_relationship ADD CONSTRAINT fk_content_link_relationship_content FOREIGN KEY ( origin_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_link_relationship ADD CONSTRAINT fk_content_link_relationship_content_0 FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_member_permission ADD CONSTRAINT fk_content_permissions_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_member_permission ADD CONSTRAINT fk_content_permissions_members FOREIGN KEY ( authorized_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_members_0 FOREIGN KEY ( moderator_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry ADD CONSTRAINT fk_gift_registry_members FOREIGN KEY ( organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_ideas ADD CONSTRAINT fk_gift_registry_ideas_gift_registry FOREIGN KEY ( target_gift_registry_id ) REFERENCES cosn.gift_registry( gift_registry_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_ideas ADD CONSTRAINT fk_gift_registry_ideas_gift_registry_participants FOREIGN KEY ( idea_owner_id ) REFERENCES cosn.gift_registry_participants( participant_member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_participants ADD CONSTRAINT fk_gift_registry_participants_members FOREIGN KEY ( participant_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_participants ADD CONSTRAINT fk_gift_registry_participants_gift_registry FOREIGN KEY ( target_gift_registry_id ) REFERENCES cosn.gift_registry( gift_registry_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event ADD CONSTRAINT fk_group_event_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event ADD CONSTRAINT fk_group_event_members FOREIGN KEY ( event_organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_option_vote ADD CONSTRAINT fk_group_event_option_vote_group_event_options FOREIGN KEY ( target_group_event_option_id ) REFERENCES cosn.group_event_options( group_event_options_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_option_vote ADD CONSTRAINT fk_group_event_option_vote_members FOREIGN KEY ( option_voter_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_options ADD CONSTRAINT fk_group_event_options_group_event FOREIGN KEY ( target_group_event_id ) REFERENCES cosn.group_event( group_event_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_options ADD CONSTRAINT fk_group_event_options_members FOREIGN KEY ( option_owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_members ADD CONSTRAINT fk_group_members_members FOREIGN KEY ( participant_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_members ADD CONSTRAINT fk_group_members_groups FOREIGN KEY ( joined_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_members FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_members_0 FOREIGN KEY ( organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite_results ADD CONSTRAINT fk_group_vote_plebiscite_results_members FOREIGN KEY ( voter_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite_results ADD CONSTRAINT fk_group_vote_plebiscite_results_group_vote_plebiscite FOREIGN KEY ( target_group_vote_plebiscite_id ) REFERENCES cosn.group_vote_plebiscite( group_vote_plebiscite_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.groups ADD CONSTRAINT fk_groups_members FOREIGN KEY ( owner_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_messages ADD CONSTRAINT fk_member_messages_members FOREIGN KEY ( origin_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_messages ADD CONSTRAINT fk_member_messages_members_0 FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_privilege_change_request ADD CONSTRAINT fk_member_privilege_change_request_members FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_relationships ADD CONSTRAINT fk_member_relationships_members FOREIGN KEY ( origin_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_relationships ADD CONSTRAINT fk_member_relationships_members_0 FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_permissions ADD CONSTRAINT fk_personal_info_visibility_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_permissions ADD CONSTRAINT fk_personal_info_visibility_members_0 FOREIGN KEY ( authorized_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_public_permissions ADD CONSTRAINT fk_personal_info_public_permissions_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_public_permissions COMMENT 'Defines which content is public';

ALTER TABLE cosn.content_public_permissions MODIFY content_public_permission_id INT UNSIGNED NOT NULL  AUTO_INCREMENT  COMMENT 'The synthetic PK (surrogate key)';

ALTER TABLE cosn.content_public_permissions MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which the public has certain permission';

ALTER TABLE cosn.content_public_permissions MODIFY content_public_permission_type ENUM('read','comment','share','link')     COMMENT 'the type of permission that the public has on this particular piece of content
can be
''read'',''comment'',''share'',''link''';

ALTER TABLE cosn.members COMMENT 'contains the info for every member of COSN';

ALTER TABLE cosn.members MODIFY member_id INT UNSIGNED NOT NULL  AUTO_INCREMENT  COMMENT 'member_id = 1 is "private" system member
member_id = 2 is "public" system member';

ALTER TABLE cosn.members MODIFY password VARCHAR(50)  NOT NULL   COMMENT 'password of the user

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY email VARCHAR(50)  NOT NULL   COMMENT 'email of the user

Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY first_name VARCHAR(100)  NOT NULL   COMMENT 'Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY last_name VARCHAR(100)  NOT NULL   COMMENT 'Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY address VARCHAR(100)     COMMENT 'address of the user.
Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY date_of_birth DATE     COMMENT 'date of birth of the user.
Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY privilege_level ENUM('administrator','senior','junior')  NOT NULL DEFAULT 'junior'  COMMENT 'privilege status of a group member (administrator, senior, junior)

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY pseudonym VARCHAR(50)     COMMENT 'name for internal interactions';

ALTER TABLE cosn.members MODIFY `status` ENUM('active','inactive','suspended')  NOT NULL DEFAULT 'active'  COMMENT 'the ''system'' status is used for internal backend representation of "public" and "private" members';

ALTER TABLE cosn.members MODIFY corporation_flag BOOLEAN  NOT NULL   COMMENT 'Defines whether the member is a corporation (corporation_flag = true) or an actual person (corporation_flag = false).';

ALTER TABLE cosn.personal_info_permissions COMMENT 'Contains the mapping for ''member-specific'' permissions (visibility) of private information.

Allows a particular piece of personal information, for a particular member, to be rendered visible to a particular set of other members. The set of other members can be constructed by the applicaton in the "shape" of a family, friends or groups, by simply inserting the needed member_id to the authorized_member_id.';

ALTER TABLE cosn.personal_info_permissions MODIFY owner_member_id INT UNSIGNED NOT NULL   COMMENT 'the membeer_id of the owner of this personal information';

ALTER TABLE cosn.personal_info_permissions MODIFY authorized_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id that is authorized to view this particular personal information, of a particular member

authorized_member_id = 1, it is visible to the "private" system member
authorized_member_id = 2, it is visible to the "public" system member';

ALTER TABLE cosn.gift_registry COMMENT 'Describes gift registry entity that different members can attach gift ideas to.';

ALTER TABLE cosn.gift_registry MODIFY organizer_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a particular gift registry organizer';

ALTER TABLE cosn.gift_registry_participants COMMENT 'Contains the participants of a particular gift registry';

ALTER TABLE cosn.gift_registry_participants MODIFY participant_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a participant of the registry';

ALTER TABLE cosn.gift_registry_participants MODIFY target_gift_registry_id INT UNSIGNED NOT NULL   COMMENT 'describes a particular gift registry that a member is part of';

ALTER TABLE cosn.groups COMMENT 'Contains the information about the groups, such as their description, who created them, etc';

ALTER TABLE cosn.groups MODIFY owner_id INT UNSIGNED    COMMENT 'ID of the member who created a particular group';

ALTER TABLE cosn.groups MODIFY description TEXT     COMMENT 'Description of the group, their interests, etc';

ALTER TABLE cosn.groups MODIFY creation_date DATE   DEFAULT current_timestamp()  COMMENT 'Date when group was created';

ALTER TABLE cosn.groups MODIFY cathegory VARCHAR(100)     COMMENT 'defines the different cathegories';

ALTER TABLE cosn.member_messages COMMENT 'table containing the messages that members send between each others';

ALTER TABLE cosn.member_messages MODIFY origin_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id from who the message is sent FROM';

ALTER TABLE cosn.member_messages MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'member_id that receives the message';

ALTER TABLE cosn.member_messages MODIFY message_content TEXT     COMMENT 'the actual content of the message';

ALTER TABLE cosn.member_privilege_change_request COMMENT 'Contains the privilege change request of a member, for example - a junior to senior member';

ALTER TABLE cosn.member_privilege_change_request MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'The ID of the member who is requesting the change';

ALTER TABLE cosn.member_privilege_change_request MODIFY requested_privilege_level ENUM('senior')     COMMENT 'desired privilege level for the tardet_member_id';

ALTER TABLE cosn.member_relationships COMMENT 'describes the relationships of the members, specifically if they are friends, family, colleagues or blocked';

ALTER TABLE cosn.member_relationships MODIFY origin_member_id INT UNSIGNED NOT NULL   COMMENT 'the member from whom the relationship originates';

ALTER TABLE cosn.member_relationships MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'the member to whom the origin_member is connected';

ALTER TABLE cosn.member_relationships MODIFY member_relationship_type ENUM('friend','family','colleague','blocked')  NOT NULL   COMMENT 'The type of relationship can be ''friend, ''family'', ''colleague'' or ''blocked''';

ALTER TABLE cosn.member_relationships MODIFY member_relationship_status ENUM('requested','approved','rejected')     COMMENT 'used to represent the evolution of the relationship from, specifically from a friend/family/colleage request to an actual confirmed relationship';

ALTER TABLE cosn.content_group_permissions MODIFY target_content_id INT UNSIGNED NOT NULL   COMMENT 'the specific piece of conent, defined by content_id on which a particular group has certain permission';

ALTER TABLE cosn.content_group_permissions MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'the particular group which has a certain permission on a specific content';

ALTER TABLE cosn.content_group_permissions MODIFY content_group_permission_type ENUM('read','comment','share','link')     COMMENT 'the type of permission that a particular group has on a certain piece of content';

ALTER TABLE cosn.gift_registry_ideas COMMENT 'describes gift ideas for a particular registry';

ALTER TABLE cosn.gift_registry_ideas MODIFY target_gift_registry_id INT UNSIGNED NOT NULL   COMMENT 'describes which particular gift registry a gift idea applies to';

ALTER TABLE cosn.gift_registry_ideas MODIFY idea_owner_id INT UNSIGNED NOT NULL   COMMENT 'ID of a member proposing a particullar gift';

ALTER TABLE cosn.gift_registry_ideas MODIFY gift_idea_description VARCHAR(200)  NOT NULL   COMMENT 'description of a proposed gift';

ALTER TABLE cosn.group_event COMMENT 'contains the events organized for particular groups';

ALTER TABLE cosn.group_event MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'Group for which a particular event is organized';

ALTER TABLE cosn.group_event MODIFY event_organizer_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a member who is organizing a particular event';

ALTER TABLE cosn.group_event MODIFY event_name VARCHAR(100)  NOT NULL   COMMENT 'Name of the particular event being organized';

ALTER TABLE cosn.group_event_options COMMENT 'describes the proposed options for a particular group event';

ALTER TABLE cosn.group_event_options MODIFY target_group_event_id INT UNSIGNED NOT NULL   COMMENT 'describes a particular group event ID on which a particular time/place/date option applies';

ALTER TABLE cosn.group_event_options MODIFY option_owner_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the member proposing a particular option of date/time/place for the event';

ALTER TABLE cosn.group_event_options MODIFY option_description VARCHAR(100)  NOT NULL   COMMENT 'describes the details of the proposed option for date/time/place
Ex: "Alaska, 2025-01-01, 07:00"';

ALTER TABLE cosn.group_members COMMENT 'Mapping between members and groups, each row telling us which member belongs to which group';

ALTER TABLE cosn.group_members MODIFY participant_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id of the participant of this group';

ALTER TABLE cosn.group_members MODIFY joined_group_id INT UNSIGNED NOT NULL   COMMENT 'the ID of a particular group, that a particular member has joined';

ALTER TABLE cosn.group_members MODIFY date_joined DATE  NOT NULL   COMMENT 'the date when a particular member has joned a particular group';

ALTER TABLE cosn.group_members MODIFY role_of_member ENUM('member','owner')   DEFAULT 'member'  COMMENT 'the role of a particular member who joined a particular group, can be either ''owner'' or ''member''';

ALTER TABLE cosn.group_vote_plebiscite COMMENT 'Contains the plebiscite organized to oust a non-person (corporate) member.';

ALTER TABLE cosn.group_vote_plebiscite MODIFY target_member_id INT UNSIGNED    COMMENT 'ID of a member being ousted';

ALTER TABLE cosn.group_vote_plebiscite MODIFY organizer_member_id INT UNSIGNED    COMMENT 'ID of the organizer of the plebiscite';

ALTER TABLE cosn.group_vote_plebiscite MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'Group from which the non-person member is being ousted.';

ALTER TABLE cosn.group_vote_plebiscite_results COMMENT 'Results of the plebiscite';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY target_group_vote_plebiscite_id INT UNSIGNED NOT NULL   COMMENT 'ID of the plebiscite.';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY voter_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the voting member on this particular plebiscite';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY voting_decision BOOLEAN  NOT NULL   COMMENT 'describes the decision of a particular member in the plebiscite vote (voting decision = true, meaning in favour of ousting)';

ALTER TABLE cosn.content COMMENT 'contains the content created by members';

ALTER TABLE cosn.content MODIFY creator_id INT UNSIGNED NOT NULL   COMMENT 'member who created this particular piece of content';

ALTER TABLE cosn.content MODIFY content_type ENUM('text','image','video')  NOT NULL   COMMENT 'what kind of content was produced';

ALTER TABLE cosn.content MODIFY content_data TEXT  NOT NULL   COMMENT 'text or URL link to the data of the content';

ALTER TABLE cosn.content MODIFY content_creation_date DATE  NOT NULL DEFAULT curdate()  COMMENT 'when was the content created';

ALTER TABLE cosn.content MODIFY content_title VARCHAR(100)     COMMENT 'title of the post of the content';

ALTER TABLE cosn.content MODIFY moderation_status ENUM('pending', 'approved', 'rejected')   DEFAULT 'pending'  COMMENT 'status of the piece of content in terms of moderation';

ALTER TABLE cosn.content_link_relationship COMMENT 'Describes the way that content s linked between each other such as a comment to a post';

ALTER TABLE cosn.content_link_relationship MODIFY origin_content_id INT UNSIGNED    COMMENT 'ContendID of the piece of content to which another piece of content is linked';

ALTER TABLE cosn.content_link_relationship MODIFY target_content_id INT UNSIGNED    COMMENT 'Identifies the piece of content that is linked to the origin contentID';

ALTER TABLE cosn.content_member_permission COMMENT 'allows for setting the granular permissions to a particular piece of content, targeted at a particular member';

ALTER TABLE cosn.content_member_permission MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which a particular member has a certain permission';

ALTER TABLE cosn.content_member_permission MODIFY authorized_member_id INT UNSIGNED    COMMENT 'which member_id has a specific permission to do something with a specific content_id

authorized_member_id = 1 is "private" system member
authorized_member_id = 2 is "public" system member';

ALTER TABLE cosn.content_member_permission MODIFY content_permission_type ENUM('read','edit','comment','share','modify-permission','moderate','link')     COMMENT 'the type of permission that the authorized_member_id has on this particular piece of content
can be
''read'',''edit'',''comment'',''share'',''modify-permission'',''moderate'',''link''';

ALTER TABLE cosn.content_moderation_warning COMMENT 'Contains the moderation warning for content posted by a member (if the content was "flagged" by a moderator';

ALTER TABLE cosn.content_moderation_warning MODIFY target_content_id INT UNSIGNED NOT NULL   COMMENT 'defines the particular piece of content that has been flagged by a moderator';

ALTER TABLE cosn.content_moderation_warning MODIFY owner_member_id INT UNSIGNED NOT NULL   COMMENT 'member responsible for posting a flagged content';

ALTER TABLE cosn.content_moderation_warning MODIFY moderator_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a moderator who flagged the particular piece of content';

ALTER TABLE cosn.group_event_option_vote COMMENT 'contains the voting results of a particular member for a particular event option proposed';

ALTER TABLE cosn.group_event_option_vote MODIFY target_group_event_option_id INT UNSIGNED NOT NULL   COMMENT 'ID of the option of proposed date/time/place for a particular event';

ALTER TABLE cosn.group_event_option_vote MODIFY option_voter_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the member who is voting on a particular option';

ALTER TABLE cosn.group_event_option_vote MODIFY option_voting_decision BOOLEAN     COMMENT 'describes the decision of a particular member regarding the proposed date/time/place for an event (true = support for the option)';
]]></string>
		</script>
		<script name="SQL_Editor_001" id="Editor-1034" language="SQL" >
			<string><![CDATA[CREATE SCHEMA cosn;

CREATE  TABLE cosn.content_group_permissions ( 
	content_group_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	target_group_id      INT UNSIGNED   NOT NULL   ,
	content_group_permission_type ENUM('read','comment','share','link')       
 ) engine=InnoDB;

CREATE  TABLE cosn.content_link_relationship ( 
	content_link_rel_id  INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	origin_content_id    INT UNSIGNED      ,
	target_content_id    INT UNSIGNED      
 ) engine=InnoDB;

CREATE INDEX fk_content_link_relationship_content ON cosn.content_link_relationship ( origin_content_id );

CREATE INDEX fk_content_link_relationship_content_0 ON cosn.content_link_relationship ( target_content_id );

CREATE  TABLE cosn.content_moderation_warning ( 
	content_moderation_warning_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED   NOT NULL   ,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	moderator_member_id  INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.content_public_permissions ( 
	content_public_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	content_public_permission_type ENUM('read','comment','share','link')       ,
	CONSTRAINT unq_content_public_permissions_target_content_id UNIQUE ( target_content_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.members ( 
	member_id            INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	username             VARCHAR(100)    NOT NULL   ,
	password             VARCHAR(50)    NOT NULL   ,
	email                VARCHAR(50)    NOT NULL   ,
	first_name           VARCHAR(100)    NOT NULL   ,
	last_name            VARCHAR(100)    NOT NULL   ,
	address              VARCHAR(100)       ,
	date_of_birth        DATE       ,
	privilege_level      ENUM('administrator','senior','junior')  DEFAULT 'junior'  NOT NULL   ,
	pseudonym            VARCHAR(50)       ,
	`status`             ENUM('active','inactive','suspended')  DEFAULT 'active'  NOT NULL   ,
	corporation_flag     BOOLEAN    NOT NULL   
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE  TABLE cosn.personal_info_permissions ( 
	personal_info_permission_id INT UNSIGNED   NOT NULL   PRIMARY KEY,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	personal_info_type   ENUM('first_name','last_name','date_of_birth','address','pseudonym','email')    NOT NULL   ,
	authorized_member_id INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_personal_info_visibility_member ON cosn.personal_info_permissions ( owner_member_id );

CREATE INDEX fk_personal_info_visibility_member_0 ON cosn.personal_info_permissions ( authorized_member_id );

CREATE  TABLE cosn.personal_info_public_permissions ( 
	personal_info_public_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	personal_info_type   ENUM('first_name','last_name','date_of_birth','address','pseudonym','email')       
 ) engine=InnoDB;

CREATE INDEX fk_personal_info_public_permissions_members ON cosn.personal_info_public_permissions ( owner_member_id );

CREATE  TABLE cosn.content ( 
	content_id           INT UNSIGNED   NOT NULL   PRIMARY KEY,
	creator_id           INT UNSIGNED   NOT NULL   ,
	content_type         ENUM('text','image','video','comment')    NOT NULL   ,
	content_data         TEXT    NOT NULL   ,
	content_creation_date DATE  DEFAULT curdate()  NOT NULL   ,
	content_title        VARCHAR(100)       ,
	moderation_status    ENUM('pending', 'approved', 'rejected')  DEFAULT 'pending'     
 ) engine=InnoDB;

CREATE  TABLE cosn.content_member_permission ( 
	content_member_permission_id INT UNSIGNED   NOT NULL   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	authorized_member_id INT UNSIGNED      ,
	content_permission_type ENUM('read','edit','comment','share','modify-permission','moderate','link')       
 ) engine=InnoDB;

CREATE INDEX fk_content_permissions_content ON cosn.content_member_permission ( target_content_id );

CREATE INDEX fk_content_permissions_members ON cosn.content_member_permission ( authorized_member_id );

CREATE  TABLE cosn.gift_registry ( 
	gift_registry_id     INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	organizer_member_id  INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.gift_registry_participants ( 
	gift_registry_participants_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	participant_member_id INT UNSIGNED   NOT NULL   ,
	target_gift_registry_id INT UNSIGNED   NOT NULL   ,
	CONSTRAINT unq_gift_registry_participants_participant_member_id UNIQUE ( participant_member_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.groups ( 
	group_id             INT UNSIGNED   NOT NULL   PRIMARY KEY,
	group_name           VARCHAR(100)    NOT NULL   ,
	owner_id             INT UNSIGNED      ,
	description          TEXT       ,
	creation_date        DATE  DEFAULT current_timestamp()     ,
	cathegory            VARCHAR(100)       
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX fk_groups_members ON cosn.groups ( owner_id );

CREATE  TABLE cosn.member_messages ( 
	member_message_id    INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	origin_member_id     INT UNSIGNED   NOT NULL   ,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	message_content      TEXT       ,
	CONSTRAINT unq_member_messages_origin_member_id UNIQUE ( origin_member_id ) ,
	CONSTRAINT unq_member_messages_target_member_id UNIQUE ( target_member_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.member_privilege_change_request ( 
	member_privilege_change_request_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	requested_privilege_level ENUM('senior')       
 ) engine=InnoDB;

CREATE  TABLE cosn.member_relationships ( 
	relationship_id      INT UNSIGNED   NOT NULL   PRIMARY KEY,
	origin_member_id     INT UNSIGNED   NOT NULL   ,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	member_relationship_type ENUM('friend','family','colleague','blocked')    NOT NULL   ,
	member_relationship_status ENUM('requested','approved','rejected')       
 ) engine=InnoDB;

CREATE INDEX fk_member_relationships_members ON cosn.member_relationships ( origin_member_id );

CREATE INDEX fk_member_relationships_members_0 ON cosn.member_relationships ( target_member_id );

CREATE  TABLE cosn.gift_registry_ideas ( 
	gift_registry_ideas_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_gift_registry_id INT UNSIGNED   NOT NULL   ,
	idea_owner_id        INT UNSIGNED   NOT NULL   ,
	gift_idea_description VARCHAR(200)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event ( 
	group_event_id       INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_id      INT UNSIGNED   NOT NULL   ,
	event_organizer_member_id INT UNSIGNED   NOT NULL   ,
	event_name           VARCHAR(100)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event_options ( 
	group_event_options_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_event_id INT UNSIGNED   NOT NULL   ,
	option_owner_member_id INT UNSIGNED   NOT NULL   ,
	option_description   VARCHAR(100)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_members ( 
	group_membership_id  INT UNSIGNED   NOT NULL   PRIMARY KEY,
	participant_member_id INT UNSIGNED   NOT NULL   ,
	joined_group_id      INT UNSIGNED   NOT NULL   ,
	date_joined          DATE    NOT NULL   ,
	role_of_member       ENUM('member','owner')  DEFAULT 'member'     
 ) engine=InnoDB;

CREATE INDEX fk_group_members_members ON cosn.group_members ( participant_member_id );

CREATE INDEX fk_group_members_groups ON cosn.group_members ( joined_group_id );

CREATE  TABLE cosn.group_vote_plebiscite ( 
	group_vote_plebiscite_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_member_id     INT UNSIGNED      ,
	organizer_member_id  INT UNSIGNED      ,
	target_group_id      INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_vote_plebiscite_results ( 
	group_vote_plebiscite_results_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_vote_plebiscite_id INT UNSIGNED   NOT NULL   ,
	voter_member_id      INT UNSIGNED   NOT NULL   ,
	voting_decision      BOOLEAN    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event_option_vote ( 
	group_event_option_vote_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_event_option_id INT UNSIGNED   NOT NULL   ,
	option_voter_member_id INT UNSIGNED   NOT NULL   ,
	option_voting_decision BOOLEAN       
 ) engine=InnoDB;

ALTER TABLE cosn.content ADD CONSTRAINT fk_content_members FOREIGN KEY ( creator_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_member_permission ADD CONSTRAINT fk_content_permissions_members FOREIGN KEY ( authorized_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry ADD CONSTRAINT fk_gift_registry_members FOREIGN KEY ( organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_ideas ADD CONSTRAINT fk_gift_registry_ideas_gift_registry FOREIGN KEY ( target_gift_registry_id ) REFERENCES cosn.gift_registry( gift_registry_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_ideas ADD CONSTRAINT fk_gift_registry_ideas_gift_registry_participants FOREIGN KEY ( idea_owner_id ) REFERENCES cosn.gift_registry_participants( participant_member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_participants ADD CONSTRAINT fk_gift_registry_participants_members FOREIGN KEY ( participant_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_participants ADD CONSTRAINT fk_gift_registry_participants_gift_registry FOREIGN KEY ( target_gift_registry_id ) REFERENCES cosn.gift_registry( gift_registry_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event ADD CONSTRAINT fk_group_event_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event ADD CONSTRAINT fk_group_event_members FOREIGN KEY ( event_organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_option_vote ADD CONSTRAINT fk_group_event_option_vote_group_event_options FOREIGN KEY ( target_group_event_option_id ) REFERENCES cosn.group_event_options( group_event_options_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_option_vote ADD CONSTRAINT fk_group_event_option_vote_members FOREIGN KEY ( option_voter_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_options ADD CONSTRAINT fk_group_event_options_group_event FOREIGN KEY ( target_group_event_id ) REFERENCES cosn.group_event( group_event_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_options ADD CONSTRAINT fk_group_event_options_members FOREIGN KEY ( option_owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_members ADD CONSTRAINT fk_group_members_members FOREIGN KEY ( participant_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_members ADD CONSTRAINT fk_group_members_groups FOREIGN KEY ( joined_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_members FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_members_0 FOREIGN KEY ( organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite_results ADD CONSTRAINT fk_group_vote_plebiscite_results_members FOREIGN KEY ( voter_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite_results ADD CONSTRAINT fk_group_vote_plebiscite_results_group_vote_plebiscite FOREIGN KEY ( target_group_vote_plebiscite_id ) REFERENCES cosn.group_vote_plebiscite( group_vote_plebiscite_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.groups ADD CONSTRAINT fk_groups_members FOREIGN KEY ( owner_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_messages ADD CONSTRAINT fk_member_messages_members FOREIGN KEY ( origin_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_messages ADD CONSTRAINT fk_member_messages_members_0 FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_privilege_change_request ADD CONSTRAINT fk_member_privilege_change_request_members FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_relationships ADD CONSTRAINT fk_member_relationships_members FOREIGN KEY ( origin_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_relationships ADD CONSTRAINT fk_member_relationships_members_0 FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_permissions ADD CONSTRAINT fk_personal_info_visibility_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_permissions ADD CONSTRAINT fk_personal_info_visibility_members_0 FOREIGN KEY ( authorized_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_public_permissions ADD CONSTRAINT fk_personal_info_public_permissions_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_group_permissions MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which a particular group has certain permission';

ALTER TABLE cosn.content_group_permissions MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'the particular group which has a certain permission on a specific content';

ALTER TABLE cosn.content_group_permissions MODIFY content_group_permission_type ENUM('read','comment','share','link')     COMMENT 'the type of permission that a particular group has on a certain piece of content';

ALTER TABLE cosn.content_link_relationship COMMENT 'Describes the way that content s linked between each other such as a comment to a post';

ALTER TABLE cosn.content_link_relationship MODIFY origin_content_id INT UNSIGNED    COMMENT 'ContendID of the piece of content to which another piece of content is linked';

ALTER TABLE cosn.content_link_relationship MODIFY target_content_id INT UNSIGNED    COMMENT 'Identifies the piece of content that is linked to the origin contentID';

ALTER TABLE cosn.content_moderation_warning COMMENT 'Contains the moderation warning for content posted by a member (if the content was "flagged" by a moderator';

ALTER TABLE cosn.content_moderation_warning MODIFY target_content_id INT UNSIGNED NOT NULL   COMMENT 'defines the particular piece of content that has been flagged by a moderator';

ALTER TABLE cosn.content_moderation_warning MODIFY owner_member_id INT UNSIGNED NOT NULL   COMMENT 'member responsible for posting a flagged content';

ALTER TABLE cosn.content_moderation_warning MODIFY moderator_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a moderator who flagged the particular piece of content';

ALTER TABLE cosn.content_public_permissions COMMENT 'Defines which content is public';

ALTER TABLE cosn.content_public_permissions MODIFY content_public_permission_id INT UNSIGNED NOT NULL  AUTO_INCREMENT  COMMENT 'The synthetic PK (surrogate key)';

ALTER TABLE cosn.content_public_permissions MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which the public has certain permission';

ALTER TABLE cosn.content_public_permissions MODIFY content_public_permission_type ENUM('read','comment','share','link')     COMMENT 'the type of permission that the public has on this particular piece of content
can be
''read'',''comment'',''share'',''link''';

ALTER TABLE cosn.members COMMENT 'contains the info for every member of COSN';

ALTER TABLE cosn.members MODIFY member_id INT UNSIGNED NOT NULL  AUTO_INCREMENT  COMMENT 'member_id = 1 is "private" system member
member_id = 2 is "public" system member';

ALTER TABLE cosn.members MODIFY password VARCHAR(50)  NOT NULL   COMMENT 'password of the user

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY email VARCHAR(50)  NOT NULL   COMMENT 'email of the user

Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY first_name VARCHAR(100)  NOT NULL   COMMENT 'Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY last_name VARCHAR(100)  NOT NULL   COMMENT 'Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY address VARCHAR(100)     COMMENT 'address of the user.
Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY date_of_birth DATE     COMMENT 'date of birth of the user.
Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY privilege_level ENUM('administrator','senior','junior')  NOT NULL DEFAULT 'junior'  COMMENT 'privilege status of a group member (administrator, senior, junior)

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY pseudonym VARCHAR(50)     COMMENT 'name for internal interactions';

ALTER TABLE cosn.members MODIFY `status` ENUM('active','inactive','suspended')  NOT NULL DEFAULT 'active'  COMMENT 'the ''system'' status is used for internal backend representation of "public" and "private" members';

ALTER TABLE cosn.members MODIFY corporation_flag BOOLEAN  NOT NULL   COMMENT 'Defines whether the member is a corporation (corporation_flag = true) or an actual person (corporation_flag = false).';

ALTER TABLE cosn.personal_info_permissions COMMENT 'Contains the mapping for ''member-specific'' permissions (visibility) of private information.

Allows a particular piece of personal information, for a particular member, to be rendered visible to a particular set of other members. The set of other members can be constructed by the applicaton in the "shape" of a family, friends or groups, by simply inserting the needed member_id to the authorized_member_id.';

ALTER TABLE cosn.personal_info_permissions MODIFY owner_member_id INT UNSIGNED NOT NULL   COMMENT 'the membeer_id of the owner of this personal information';

ALTER TABLE cosn.personal_info_permissions MODIFY authorized_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id that is authorized to view this particular personal information, of a particular member

authorized_member_id = 1, it is visible to the "private" system member
authorized_member_id = 2, it is visible to the "public" system member';

ALTER TABLE cosn.content COMMENT 'contains the content created by members';

ALTER TABLE cosn.content MODIFY creator_id INT UNSIGNED NOT NULL   COMMENT 'member who created this particular piece of content';

ALTER TABLE cosn.content MODIFY content_type ENUM('text','image','video','comment')  NOT NULL   COMMENT 'what kind of content was produced';

ALTER TABLE cosn.content MODIFY content_data TEXT  NOT NULL   COMMENT 'text or URL link to the data of the content';

ALTER TABLE cosn.content MODIFY content_creation_date DATE  NOT NULL DEFAULT curdate()  COMMENT 'when was the content created';

ALTER TABLE cosn.content MODIFY content_title VARCHAR(100)     COMMENT 'title of the post of the content';

ALTER TABLE cosn.content MODIFY moderation_status ENUM('pending', 'approved', 'rejected')   DEFAULT 'pending'  COMMENT 'status of the piece of content in terms of moderation';

ALTER TABLE cosn.content_member_permission COMMENT 'allows for setting the granular permissions to a particular piece of content, targeted at a particular member';

ALTER TABLE cosn.content_member_permission MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which a particular member has a certain permission';

ALTER TABLE cosn.content_member_permission MODIFY authorized_member_id INT UNSIGNED    COMMENT 'which member_id has a specific permission to do something with a specific content_id

authorized_member_id = 1 is "private" system member
authorized_member_id = 2 is "public" system member';

ALTER TABLE cosn.content_member_permission MODIFY content_permission_type ENUM('read','edit','comment','share','modify-permission','moderate','link')     COMMENT 'the type of permission that the authorized_member_id has on this particular piece of content
can be
''read'',''edit'',''comment'',''share'',''modify-permission'',''moderate'',''link''';

ALTER TABLE cosn.gift_registry COMMENT 'Describes gift registry entity that different members can attach gift ideas to.';

ALTER TABLE cosn.gift_registry MODIFY organizer_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a particular gift registry organizer';

ALTER TABLE cosn.gift_registry_participants COMMENT 'Contains the participants of a particular gift registry';

ALTER TABLE cosn.gift_registry_participants MODIFY participant_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a participant of the registry';

ALTER TABLE cosn.gift_registry_participants MODIFY target_gift_registry_id INT UNSIGNED NOT NULL   COMMENT 'describes a particular gift registry that a member is part of';

ALTER TABLE cosn.groups COMMENT 'Contains the information about the groups, such as their description, who created them, etc';

ALTER TABLE cosn.groups MODIFY owner_id INT UNSIGNED    COMMENT 'ID of the member who created a particular group';

ALTER TABLE cosn.groups MODIFY description TEXT     COMMENT 'Description of the group, their interests, etc';

ALTER TABLE cosn.groups MODIFY creation_date DATE   DEFAULT current_timestamp()  COMMENT 'Date when group was created';

ALTER TABLE cosn.groups MODIFY cathegory VARCHAR(100)     COMMENT 'defines the different cathegories';

ALTER TABLE cosn.member_messages COMMENT 'table containing the messages that members send between each others';

ALTER TABLE cosn.member_messages MODIFY origin_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id from who the message is sent FROM';

ALTER TABLE cosn.member_messages MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'member_id that receives the message';

ALTER TABLE cosn.member_messages MODIFY message_content TEXT     COMMENT 'the actual content of the message';

ALTER TABLE cosn.member_privilege_change_request COMMENT 'Contains the privilege change request of a member, for example - a junior to senior member';

ALTER TABLE cosn.member_privilege_change_request MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'The ID of the member who is requesting the change';

ALTER TABLE cosn.member_privilege_change_request MODIFY requested_privilege_level ENUM('senior')     COMMENT 'desired privilege level for the tardet_member_id';

ALTER TABLE cosn.member_relationships COMMENT 'describes the relationships of the members, specifically if they are friends, family, colleagues or blocked';

ALTER TABLE cosn.member_relationships MODIFY origin_member_id INT UNSIGNED NOT NULL   COMMENT 'the member from whom the relationship originates';

ALTER TABLE cosn.member_relationships MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'the member to whom the origin_member is connected';

ALTER TABLE cosn.member_relationships MODIFY member_relationship_type ENUM('friend','family','colleague','blocked')  NOT NULL   COMMENT 'The type of relationship can be ''friend, ''family'', ''colleague'' or ''blocked''';

ALTER TABLE cosn.member_relationships MODIFY member_relationship_status ENUM('requested','approved','rejected')     COMMENT 'used to represent the evolution of the relationship from, specifically from a friend/family/colleage request to an actual confirmed relationship';

ALTER TABLE cosn.gift_registry_ideas COMMENT 'describes gift ideas for a particular registry';

ALTER TABLE cosn.gift_registry_ideas MODIFY target_gift_registry_id INT UNSIGNED NOT NULL   COMMENT 'describes which particular gift registry a gift idea applies to';

ALTER TABLE cosn.gift_registry_ideas MODIFY idea_owner_id INT UNSIGNED NOT NULL   COMMENT 'ID of a member proposing a particullar gift';

ALTER TABLE cosn.gift_registry_ideas MODIFY gift_idea_description VARCHAR(200)  NOT NULL   COMMENT 'description of a proposed gift';

ALTER TABLE cosn.group_event COMMENT 'contains the events organized for particular groups';

ALTER TABLE cosn.group_event MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'Group for which a particular event is organized';

ALTER TABLE cosn.group_event MODIFY event_organizer_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a member who is organizing a particular event';

ALTER TABLE cosn.group_event MODIFY event_name VARCHAR(100)  NOT NULL   COMMENT 'Name of the particular event being organized';

ALTER TABLE cosn.group_event_options COMMENT 'describes the proposed options for a particular group event';

ALTER TABLE cosn.group_event_options MODIFY target_group_event_id INT UNSIGNED NOT NULL   COMMENT 'describes a particular group event ID on which a particular time/place/date option applies';

ALTER TABLE cosn.group_event_options MODIFY option_owner_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the member proposing a particular option of date/time/place for the event';

ALTER TABLE cosn.group_event_options MODIFY option_description VARCHAR(100)  NOT NULL   COMMENT 'describes the details of the proposed option for date/time/place
Ex: "Alaska, 2025-01-01, 07:00"';

ALTER TABLE cosn.group_members COMMENT 'Mapping between members and groups, each row telling us which member belongs to which group';

ALTER TABLE cosn.group_members MODIFY participant_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id of the participant of this group';

ALTER TABLE cosn.group_members MODIFY joined_group_id INT UNSIGNED NOT NULL   COMMENT 'the ID of a particular group, that a particular member has joined';

ALTER TABLE cosn.group_members MODIFY date_joined DATE  NOT NULL   COMMENT 'the date when a particular member has joned a particular group';

ALTER TABLE cosn.group_members MODIFY role_of_member ENUM('member','owner')   DEFAULT 'member'  COMMENT 'the role of a particular member who joined a particular group, can be either ''owner'' or ''member''';

ALTER TABLE cosn.group_vote_plebiscite COMMENT 'Contains the plebiscite organized to oust a non-person (corporate) member.';

ALTER TABLE cosn.group_vote_plebiscite MODIFY target_member_id INT UNSIGNED    COMMENT 'ID of a member being ousted';

ALTER TABLE cosn.group_vote_plebiscite MODIFY organizer_member_id INT UNSIGNED    COMMENT 'ID of the organizer of the plebiscite';

ALTER TABLE cosn.group_vote_plebiscite MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'Group from which the non-person member is being ousted.';

ALTER TABLE cosn.group_vote_plebiscite_results COMMENT 'Results of the plebiscite';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY target_group_vote_plebiscite_id INT UNSIGNED NOT NULL   COMMENT 'ID of the plebiscite.';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY voter_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the voting member on this particular plebiscite';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY voting_decision BOOLEAN  NOT NULL   COMMENT 'describes the decision of a particular member in the plebiscite vote (voting decision = true, meaning in favour of ousting)';

ALTER TABLE cosn.group_event_option_vote COMMENT 'contains the voting results of a particular member for a particular event option proposed';

ALTER TABLE cosn.group_event_option_vote MODIFY target_group_event_option_id INT UNSIGNED NOT NULL   COMMENT 'ID of the option of proposed date/time/place for a particular event';

ALTER TABLE cosn.group_event_option_vote MODIFY option_voter_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the member who is voting on a particular option';

ALTER TABLE cosn.group_event_option_vote MODIFY option_voting_decision BOOLEAN     COMMENT 'describes the decision of a particular member regarding the proposed date/time/place for an event (true = support for the option)';
]]></string>
		</script>
		<script name="SQL_Editor_002" id="Editor-25c8" language="SQL" >
			<string><![CDATA[CREATE SCHEMA cosn;

CREATE  TABLE cosn.content_group_permissions ( 
	content_group_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	target_group_id      INT UNSIGNED   NOT NULL   ,
	content_group_permission_type ENUM('read','comment','share','link')       
 ) engine=InnoDB;

CREATE  TABLE cosn.content_public_permissions ( 
	content_public_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	content_public_permission_type ENUM('read','comment','share','link')       ,
	CONSTRAINT unq_content_public_permissions_target_content_id UNIQUE ( target_content_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.members ( 
	member_id            INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	username             VARCHAR(100)    NOT NULL   ,
	password             VARCHAR(50)    NOT NULL   ,
	email                VARCHAR(50)    NOT NULL   ,
	first_name           VARCHAR(100)    NOT NULL   ,
	last_name            VARCHAR(100)    NOT NULL   ,
	address              VARCHAR(100)       ,
	date_of_birth        DATE       ,
	privilege_level      ENUM('administrator','senior','junior')  DEFAULT 'junior'  NOT NULL   ,
	pseudonym            VARCHAR(50)       ,
	`status`             ENUM('active','inactive','suspended')  DEFAULT 'active'  NOT NULL   ,
	corporation_flag     BOOLEAN    NOT NULL   
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE  TABLE cosn.personal_info_permissions ( 
	personal_info_permission_id INT UNSIGNED   NOT NULL   PRIMARY KEY,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	personal_info_type   ENUM('first_name','last_name','date_of_birth','address','pseudonym','email')    NOT NULL   ,
	authorized_member_id INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_personal_info_visibility_member ON cosn.personal_info_permissions ( owner_member_id );

CREATE INDEX fk_personal_info_visibility_member_0 ON cosn.personal_info_permissions ( authorized_member_id );

CREATE  TABLE cosn.personal_info_public_permissions ( 
	personal_info_public_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	personal_info_type   ENUM('first_name','last_name','date_of_birth','address','pseudonym','email')       
 ) engine=InnoDB;

CREATE INDEX fk_personal_info_public_permissions_members ON cosn.personal_info_public_permissions ( owner_member_id );

CREATE  TABLE cosn.content ( 
	content_id           INT UNSIGNED   NOT NULL   PRIMARY KEY,
	creator_id           INT UNSIGNED   NOT NULL   ,
	content_type         ENUM('text','image','video','comment')    NOT NULL   ,
	content_data         TEXT    NOT NULL   ,
	content_creation_date DATE  DEFAULT curdate()  NOT NULL   ,
	content_title        VARCHAR(100)       ,
	moderation_status    ENUM('pending', 'approved', 'rejected')  DEFAULT 'pending'     
 ) engine=InnoDB;

CREATE  TABLE cosn.content_link_relationship ( 
	content_link_rel_id  INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	origin_content_id    INT UNSIGNED      ,
	target_content_id    INT UNSIGNED      
 ) engine=InnoDB;

CREATE INDEX fk_content_link_relationship_content ON cosn.content_link_relationship ( origin_content_id );

CREATE INDEX fk_content_link_relationship_content_0 ON cosn.content_link_relationship ( target_content_id );

CREATE  TABLE cosn.content_member_permission ( 
	content_member_permission_id INT UNSIGNED   NOT NULL   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	authorized_member_id INT UNSIGNED      ,
	content_permission_type ENUM('read','edit','comment','share','modify-permission','moderate','link')       
 ) engine=InnoDB;

CREATE INDEX fk_content_permissions_content ON cosn.content_member_permission ( target_content_id );

CREATE INDEX fk_content_permissions_members ON cosn.content_member_permission ( authorized_member_id );

CREATE  TABLE cosn.content_moderation_warning ( 
	content_moderation_warning_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED   NOT NULL   ,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	moderator_member_id  INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.gift_registry ( 
	gift_registry_id     INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	organizer_member_id  INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.gift_registry_participants ( 
	gift_registry_participants_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	participant_member_id INT UNSIGNED   NOT NULL   ,
	target_gift_registry_id INT UNSIGNED   NOT NULL   ,
	CONSTRAINT unq_gift_registry_participants_participant_member_id UNIQUE ( participant_member_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.groups ( 
	group_id             INT UNSIGNED   NOT NULL   PRIMARY KEY,
	group_name           VARCHAR(100)    NOT NULL   ,
	owner_id             INT UNSIGNED      ,
	description          TEXT       ,
	creation_date        DATE  DEFAULT current_timestamp()     ,
	cathegory            VARCHAR(100)       
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX fk_groups_members ON cosn.groups ( owner_id );

CREATE  TABLE cosn.member_messages ( 
	member_message_id    INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	origin_member_id     INT UNSIGNED   NOT NULL   ,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	message_content      TEXT       ,
	CONSTRAINT unq_member_messages_origin_member_id UNIQUE ( origin_member_id ) ,
	CONSTRAINT unq_member_messages_target_member_id UNIQUE ( target_member_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.member_privilege_change_request ( 
	member_privilege_change_request_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	requested_privilege_level ENUM('senior')       
 ) engine=InnoDB;

CREATE  TABLE cosn.member_relationships ( 
	relationship_id      INT UNSIGNED   NOT NULL   PRIMARY KEY,
	origin_member_id     INT UNSIGNED   NOT NULL   ,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	member_relationship_type ENUM('friend','family','colleague','blocked')    NOT NULL   ,
	member_relationship_status ENUM('requested','approved','rejected')       
 ) engine=InnoDB;

CREATE INDEX fk_member_relationships_members ON cosn.member_relationships ( origin_member_id );

CREATE INDEX fk_member_relationships_members_0 ON cosn.member_relationships ( target_member_id );

CREATE  TABLE cosn.gift_registry_ideas ( 
	gift_registry_ideas_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_gift_registry_id INT UNSIGNED   NOT NULL   ,
	idea_owner_id        INT UNSIGNED   NOT NULL   ,
	gift_idea_description VARCHAR(200)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event ( 
	group_event_id       INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_id      INT UNSIGNED   NOT NULL   ,
	event_organizer_member_id INT UNSIGNED   NOT NULL   ,
	event_name           VARCHAR(100)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event_options ( 
	group_event_options_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_event_id INT UNSIGNED   NOT NULL   ,
	option_owner_member_id INT UNSIGNED   NOT NULL   ,
	option_description   VARCHAR(100)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_members ( 
	group_membership_id  INT UNSIGNED   NOT NULL   PRIMARY KEY,
	participant_member_id INT UNSIGNED   NOT NULL   ,
	joined_group_id      INT UNSIGNED   NOT NULL   ,
	date_joined          DATE    NOT NULL   ,
	role_of_member       ENUM('member','owner')  DEFAULT 'member'     
 ) engine=InnoDB;

CREATE INDEX fk_group_members_members ON cosn.group_members ( participant_member_id );

CREATE INDEX fk_group_members_groups ON cosn.group_members ( joined_group_id );

CREATE  TABLE cosn.group_vote_plebiscite ( 
	group_vote_plebiscite_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_member_id     INT UNSIGNED      ,
	organizer_member_id  INT UNSIGNED      ,
	target_group_id      INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_vote_plebiscite_results ( 
	group_vote_plebiscite_results_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_vote_plebiscite_id INT UNSIGNED   NOT NULL   ,
	voter_member_id      INT UNSIGNED   NOT NULL   ,
	voting_decision      BOOLEAN    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event_option_vote ( 
	group_event_option_vote_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_event_option_id INT UNSIGNED   NOT NULL   ,
	option_voter_member_id INT UNSIGNED   NOT NULL   ,
	option_voting_decision BOOLEAN       
 ) engine=InnoDB;

ALTER TABLE cosn.content ADD CONSTRAINT fk_content_members FOREIGN KEY ( creator_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content ADD CONSTRAINT fk_content_content_public_permissions FOREIGN KEY ( content_id ) REFERENCES cosn.content_public_permissions( target_content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content ADD CONSTRAINT fk_content_content_group_permissions FOREIGN KEY ( content_id ) REFERENCES cosn.content_group_permissions( target_content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_link_relationship ADD CONSTRAINT fk_content_link_relationship_content FOREIGN KEY ( origin_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_link_relationship ADD CONSTRAINT fk_content_link_relationship_content_0 FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_member_permission ADD CONSTRAINT fk_content_permissions_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_member_permission ADD CONSTRAINT fk_content_permissions_members FOREIGN KEY ( authorized_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_members_0 FOREIGN KEY ( moderator_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry ADD CONSTRAINT fk_gift_registry_members FOREIGN KEY ( organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_ideas ADD CONSTRAINT fk_gift_registry_ideas_gift_registry FOREIGN KEY ( target_gift_registry_id ) REFERENCES cosn.gift_registry( gift_registry_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_ideas ADD CONSTRAINT fk_gift_registry_ideas_gift_registry_participants FOREIGN KEY ( idea_owner_id ) REFERENCES cosn.gift_registry_participants( participant_member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_participants ADD CONSTRAINT fk_gift_registry_participants_members FOREIGN KEY ( participant_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_participants ADD CONSTRAINT fk_gift_registry_participants_gift_registry FOREIGN KEY ( target_gift_registry_id ) REFERENCES cosn.gift_registry( gift_registry_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event ADD CONSTRAINT fk_group_event_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event ADD CONSTRAINT fk_group_event_members FOREIGN KEY ( event_organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_option_vote ADD CONSTRAINT fk_group_event_option_vote_group_event_options FOREIGN KEY ( target_group_event_option_id ) REFERENCES cosn.group_event_options( group_event_options_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_option_vote ADD CONSTRAINT fk_group_event_option_vote_members FOREIGN KEY ( option_voter_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_options ADD CONSTRAINT fk_group_event_options_group_event FOREIGN KEY ( target_group_event_id ) REFERENCES cosn.group_event( group_event_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_options ADD CONSTRAINT fk_group_event_options_members FOREIGN KEY ( option_owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_members ADD CONSTRAINT fk_group_members_members FOREIGN KEY ( participant_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_members ADD CONSTRAINT fk_group_members_groups FOREIGN KEY ( joined_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_members FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_members_0 FOREIGN KEY ( organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite_results ADD CONSTRAINT fk_group_vote_plebiscite_results_members FOREIGN KEY ( voter_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite_results ADD CONSTRAINT fk_group_vote_plebiscite_results_group_vote_plebiscite FOREIGN KEY ( target_group_vote_plebiscite_id ) REFERENCES cosn.group_vote_plebiscite( group_vote_plebiscite_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.groups ADD CONSTRAINT fk_groups_members FOREIGN KEY ( owner_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_messages ADD CONSTRAINT fk_member_messages_members FOREIGN KEY ( origin_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_messages ADD CONSTRAINT fk_member_messages_members_0 FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_privilege_change_request ADD CONSTRAINT fk_member_privilege_change_request_members FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_relationships ADD CONSTRAINT fk_member_relationships_members FOREIGN KEY ( origin_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_relationships ADD CONSTRAINT fk_member_relationships_members_0 FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_permissions ADD CONSTRAINT fk_personal_info_visibility_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_permissions ADD CONSTRAINT fk_personal_info_visibility_members_0 FOREIGN KEY ( authorized_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_public_permissions ADD CONSTRAINT fk_personal_info_public_permissions_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_group_permissions MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which a particular group has certain permission';

ALTER TABLE cosn.content_group_permissions MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'the particular group which has a certain permission on a specific content';

ALTER TABLE cosn.content_group_permissions MODIFY content_group_permission_type ENUM('read','comment','share','link')     COMMENT 'the type of permission that a particular group has on a certain piece of content';

ALTER TABLE cosn.content_public_permissions COMMENT 'Defines which content is public';

ALTER TABLE cosn.content_public_permissions MODIFY content_public_permission_id INT UNSIGNED NOT NULL  AUTO_INCREMENT  COMMENT 'The synthetic PK (surrogate key)';

ALTER TABLE cosn.content_public_permissions MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which the public has certain permission';

ALTER TABLE cosn.content_public_permissions MODIFY content_public_permission_type ENUM('read','comment','share','link')     COMMENT 'the type of permission that the public has on this particular piece of content
can be
''read'',''comment'',''share'',''link''';

ALTER TABLE cosn.members COMMENT 'contains the info for every member of COSN';

ALTER TABLE cosn.members MODIFY member_id INT UNSIGNED NOT NULL  AUTO_INCREMENT  COMMENT 'member_id = 1 is "private" system member
member_id = 2 is "public" system member';

ALTER TABLE cosn.members MODIFY password VARCHAR(50)  NOT NULL   COMMENT 'password of the user

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY email VARCHAR(50)  NOT NULL   COMMENT 'email of the user

Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY first_name VARCHAR(100)  NOT NULL   COMMENT 'Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY last_name VARCHAR(100)  NOT NULL   COMMENT 'Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY address VARCHAR(100)     COMMENT 'address of the user.
Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY date_of_birth DATE     COMMENT 'date of birth of the user.
Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY privilege_level ENUM('administrator','senior','junior')  NOT NULL DEFAULT 'junior'  COMMENT 'privilege status of a group member (administrator, senior, junior)

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY pseudonym VARCHAR(50)     COMMENT 'name for internal interactions';

ALTER TABLE cosn.members MODIFY `status` ENUM('active','inactive','suspended')  NOT NULL DEFAULT 'active'  COMMENT 'the ''system'' status is used for internal backend representation of "public" and "private" members';

ALTER TABLE cosn.members MODIFY corporation_flag BOOLEAN  NOT NULL   COMMENT 'Defines whether the member is a corporation (corporation_flag = true) or an actual person (corporation_flag = false).';

ALTER TABLE cosn.personal_info_permissions COMMENT 'Contains the mapping for ''member-specific'' permissions (visibility) of private information.

Allows a particular piece of personal information, for a particular member, to be rendered visible to a particular set of other members. The set of other members can be constructed by the applicaton in the "shape" of a family, friends or groups, by simply inserting the needed member_id to the authorized_member_id.';

ALTER TABLE cosn.personal_info_permissions MODIFY owner_member_id INT UNSIGNED NOT NULL   COMMENT 'the membeer_id of the owner of this personal information';

ALTER TABLE cosn.personal_info_permissions MODIFY authorized_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id that is authorized to view this particular personal information, of a particular member

authorized_member_id = 1, it is visible to the "private" system member
authorized_member_id = 2, it is visible to the "public" system member';

ALTER TABLE cosn.content COMMENT 'contains the content created by members';

ALTER TABLE cosn.content MODIFY creator_id INT UNSIGNED NOT NULL   COMMENT 'member who created this particular piece of content';

ALTER TABLE cosn.content MODIFY content_type ENUM('text','image','video','comment')  NOT NULL   COMMENT 'what kind of content was produced';

ALTER TABLE cosn.content MODIFY content_data TEXT  NOT NULL   COMMENT 'text or URL link to the data of the content';

ALTER TABLE cosn.content MODIFY content_creation_date DATE  NOT NULL DEFAULT curdate()  COMMENT 'when was the content created';

ALTER TABLE cosn.content MODIFY content_title VARCHAR(100)     COMMENT 'title of the post of the content';

ALTER TABLE cosn.content MODIFY moderation_status ENUM('pending', 'approved', 'rejected')   DEFAULT 'pending'  COMMENT 'status of the piece of content in terms of moderation';

ALTER TABLE cosn.content_link_relationship COMMENT 'Describes the way that content s linked between each other such as a comment to a post';

ALTER TABLE cosn.content_link_relationship MODIFY origin_content_id INT UNSIGNED    COMMENT 'ContendID of the piece of content to which another piece of content is linked';

ALTER TABLE cosn.content_link_relationship MODIFY target_content_id INT UNSIGNED    COMMENT 'Identifies the piece of content that is linked to the origin contentID';

ALTER TABLE cosn.content_member_permission COMMENT 'allows for setting the granular permissions to a particular piece of content, targeted at a particular member';

ALTER TABLE cosn.content_member_permission MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which a particular member has a certain permission';

ALTER TABLE cosn.content_member_permission MODIFY authorized_member_id INT UNSIGNED    COMMENT 'which member_id has a specific permission to do something with a specific content_id

authorized_member_id = 1 is "private" system member
authorized_member_id = 2 is "public" system member';

ALTER TABLE cosn.content_member_permission MODIFY content_permission_type ENUM('read','edit','comment','share','modify-permission','moderate','link')     COMMENT 'the type of permission that the authorized_member_id has on this particular piece of content
can be
''read'',''edit'',''comment'',''share'',''modify-permission'',''moderate'',''link''';

ALTER TABLE cosn.content_moderation_warning COMMENT 'Contains the moderation warning for content posted by a member (if the content was "flagged" by a moderator';

ALTER TABLE cosn.content_moderation_warning MODIFY target_content_id INT UNSIGNED NOT NULL   COMMENT 'defines the particular piece of content that has been flagged by a moderator';

ALTER TABLE cosn.content_moderation_warning MODIFY owner_member_id INT UNSIGNED NOT NULL   COMMENT 'member responsible for posting a flagged content';

ALTER TABLE cosn.content_moderation_warning MODIFY moderator_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a moderator who flagged the particular piece of content';

ALTER TABLE cosn.gift_registry COMMENT 'Describes gift registry entity that different members can attach gift ideas to.';

ALTER TABLE cosn.gift_registry MODIFY organizer_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a particular gift registry organizer';

ALTER TABLE cosn.gift_registry_participants COMMENT 'Contains the participants of a particular gift registry';

ALTER TABLE cosn.gift_registry_participants MODIFY participant_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a participant of the registry';

ALTER TABLE cosn.gift_registry_participants MODIFY target_gift_registry_id INT UNSIGNED NOT NULL   COMMENT 'describes a particular gift registry that a member is part of';

ALTER TABLE cosn.groups COMMENT 'Contains the information about the groups, such as their description, who created them, etc';

ALTER TABLE cosn.groups MODIFY owner_id INT UNSIGNED    COMMENT 'ID of the member who created a particular group';

ALTER TABLE cosn.groups MODIFY description TEXT     COMMENT 'Description of the group, their interests, etc';

ALTER TABLE cosn.groups MODIFY creation_date DATE   DEFAULT current_timestamp()  COMMENT 'Date when group was created';

ALTER TABLE cosn.groups MODIFY cathegory VARCHAR(100)     COMMENT 'defines the different cathegories';

ALTER TABLE cosn.member_messages COMMENT 'table containing the messages that members send between each others';

ALTER TABLE cosn.member_messages MODIFY origin_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id from who the message is sent FROM';

ALTER TABLE cosn.member_messages MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'member_id that receives the message';

ALTER TABLE cosn.member_messages MODIFY message_content TEXT     COMMENT 'the actual content of the message';

ALTER TABLE cosn.member_privilege_change_request COMMENT 'Contains the privilege change request of a member, for example - a junior to senior member';

ALTER TABLE cosn.member_privilege_change_request MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'The ID of the member who is requesting the change';

ALTER TABLE cosn.member_privilege_change_request MODIFY requested_privilege_level ENUM('senior')     COMMENT 'desired privilege level for the tardet_member_id';

ALTER TABLE cosn.member_relationships COMMENT 'describes the relationships of the members, specifically if they are friends, family, colleagues or blocked';

ALTER TABLE cosn.member_relationships MODIFY origin_member_id INT UNSIGNED NOT NULL   COMMENT 'the member from whom the relationship originates';

ALTER TABLE cosn.member_relationships MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'the member to whom the origin_member is connected';

ALTER TABLE cosn.member_relationships MODIFY member_relationship_type ENUM('friend','family','colleague','blocked')  NOT NULL   COMMENT 'The type of relationship can be ''friend, ''family'', ''colleague'' or ''blocked''';

ALTER TABLE cosn.member_relationships MODIFY member_relationship_status ENUM('requested','approved','rejected')     COMMENT 'used to represent the evolution of the relationship from, specifically from a friend/family/colleage request to an actual confirmed relationship';

ALTER TABLE cosn.gift_registry_ideas COMMENT 'describes gift ideas for a particular registry';

ALTER TABLE cosn.gift_registry_ideas MODIFY target_gift_registry_id INT UNSIGNED NOT NULL   COMMENT 'describes which particular gift registry a gift idea applies to';

ALTER TABLE cosn.gift_registry_ideas MODIFY idea_owner_id INT UNSIGNED NOT NULL   COMMENT 'ID of a member proposing a particullar gift';

ALTER TABLE cosn.gift_registry_ideas MODIFY gift_idea_description VARCHAR(200)  NOT NULL   COMMENT 'description of a proposed gift';

ALTER TABLE cosn.group_event COMMENT 'contains the events organized for particular groups';

ALTER TABLE cosn.group_event MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'Group for which a particular event is organized';

ALTER TABLE cosn.group_event MODIFY event_organizer_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a member who is organizing a particular event';

ALTER TABLE cosn.group_event MODIFY event_name VARCHAR(100)  NOT NULL   COMMENT 'Name of the particular event being organized';

ALTER TABLE cosn.group_event_options COMMENT 'describes the proposed options for a particular group event';

ALTER TABLE cosn.group_event_options MODIFY target_group_event_id INT UNSIGNED NOT NULL   COMMENT 'describes a particular group event ID on which a particular time/place/date option applies';

ALTER TABLE cosn.group_event_options MODIFY option_owner_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the member proposing a particular option of date/time/place for the event';

ALTER TABLE cosn.group_event_options MODIFY option_description VARCHAR(100)  NOT NULL   COMMENT 'describes the details of the proposed option for date/time/place
Ex: "Alaska, 2025-01-01, 07:00"';

ALTER TABLE cosn.group_members COMMENT 'Mapping between members and groups, each row telling us which member belongs to which group';

ALTER TABLE cosn.group_members MODIFY participant_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id of the participant of this group';

ALTER TABLE cosn.group_members MODIFY joined_group_id INT UNSIGNED NOT NULL   COMMENT 'the ID of a particular group, that a particular member has joined';

ALTER TABLE cosn.group_members MODIFY date_joined DATE  NOT NULL   COMMENT 'the date when a particular member has joned a particular group';

ALTER TABLE cosn.group_members MODIFY role_of_member ENUM('member','owner')   DEFAULT 'member'  COMMENT 'the role of a particular member who joined a particular group, can be either ''owner'' or ''member''';

ALTER TABLE cosn.group_vote_plebiscite COMMENT 'Contains the plebiscite organized to oust a non-person (corporate) member.';

ALTER TABLE cosn.group_vote_plebiscite MODIFY target_member_id INT UNSIGNED    COMMENT 'ID of a member being ousted';

ALTER TABLE cosn.group_vote_plebiscite MODIFY organizer_member_id INT UNSIGNED    COMMENT 'ID of the organizer of the plebiscite';

ALTER TABLE cosn.group_vote_plebiscite MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'Group from which the non-person member is being ousted.';

ALTER TABLE cosn.group_vote_plebiscite_results COMMENT 'Results of the plebiscite';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY target_group_vote_plebiscite_id INT UNSIGNED NOT NULL   COMMENT 'ID of the plebiscite.';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY voter_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the voting member on this particular plebiscite';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY voting_decision BOOLEAN  NOT NULL   COMMENT 'describes the decision of a particular member in the plebiscite vote (voting decision = true, meaning in favour of ousting)';

ALTER TABLE cosn.group_event_option_vote COMMENT 'contains the voting results of a particular member for a particular event option proposed';

ALTER TABLE cosn.group_event_option_vote MODIFY target_group_event_option_id INT UNSIGNED NOT NULL   COMMENT 'ID of the option of proposed date/time/place for a particular event';

ALTER TABLE cosn.group_event_option_vote MODIFY option_voter_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the member who is voting on a particular option';

ALTER TABLE cosn.group_event_option_vote MODIFY option_voting_decision BOOLEAN     COMMENT 'describes the decision of a particular member regarding the proposed date/time/place for an event (true = support for the option)';]]></string>
		</script>
		<script name="SQL_Editor_003" id="Editor-11a8" language="SQL" >
			<string><![CDATA[ALTER TABLE cosn.content ADD CONSTRAINT fk_content_content_group_permissions FOREIGN KEY ( content_id ) REFERENCES cosn.content_group_permissions( target_content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_member_permission MODIFY authorized_member_id INT UNSIGNED    COMMENT 'which member_id has a specific permission to do something with a specific content_id

authorized_member_id = 1 is "private" system member
authorized_member_id = 2 is "public" system member';

ALTER TABLE cosn.members MODIFY password VARCHAR(50)  NOT NULL   COMMENT 'password of the user

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY email VARCHAR(50)  NOT NULL   COMMENT 'email of the user

Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY privilege_level ENUM('administrator','senior','junior')  NOT NULL DEFAULT 'junior'  COMMENT 'privilege status of a group member (administrator, senior, junior)

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.personal_info_permissions COMMENT 'Contains the mapping for ''member-specific'' permissions (visibility) of private information.

Allows a particular piece of personal information, for a particular member, to be rendered visible to a particular set of other members. The set of other members can be constructed by the applicaton in the "shape" of a family, friends or groups, by simply inserting the needed member_id to the authorized_member_id.';

ALTER TABLE cosn.personal_info_permissions MODIFY authorized_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id that is authorized to view this particular personal information, of a particular member

authorized_member_id = 1, it is visible to the "private" system member
authorized_member_id = 2, it is visible to the "public" system member';]]></string>
		</script>
		<script name="SQL_Editor_004" id="Editor-1ec5" language="SQL" >
			<string><![CDATA[CREATE SCHEMA cosn;

CREATE  TABLE cosn.members ( 
	member_id            INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	username             VARCHAR(100)    NOT NULL   ,
	password             VARCHAR(50)    NOT NULL   ,
	email                VARCHAR(50)    NOT NULL   ,
	first_name           VARCHAR(100)    NOT NULL   ,
	last_name            VARCHAR(100)    NOT NULL   ,
	address              VARCHAR(100)       ,
	date_of_birth        DATE       ,
	privilege_level      ENUM('administrator','senior','junior')  DEFAULT 'junior'  NOT NULL   ,
	pseudonym            VARCHAR(50)       ,
	`status`             ENUM('active','inactive','suspended')  DEFAULT 'active'  NOT NULL   ,
	corporation_flag     BOOLEAN    NOT NULL   
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE  TABLE cosn.personal_info_permissions ( 
	personal_info_permission_id INT UNSIGNED   NOT NULL   PRIMARY KEY,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	personal_info_type   ENUM('first_name','last_name','date_of_birth','address','pseudonym','email')    NOT NULL   ,
	authorized_member_id INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_personal_info_visibility_member ON cosn.personal_info_permissions ( owner_member_id );

CREATE INDEX fk_personal_info_visibility_member_0 ON cosn.personal_info_permissions ( authorized_member_id );

CREATE  TABLE cosn.personal_info_public_permissions ( 
	personal_info_public_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	personal_info_type   ENUM('first_name','last_name','date_of_birth','address','pseudonym','email')       
 ) engine=InnoDB;

CREATE INDEX fk_personal_info_public_permissions_members ON cosn.personal_info_public_permissions ( owner_member_id );

CREATE  TABLE cosn.content ( 
	content_id           INT UNSIGNED   NOT NULL   PRIMARY KEY,
	creator_id           INT UNSIGNED   NOT NULL   ,
	content_type         ENUM('text','image','video','comment')    NOT NULL   ,
	content_data         TEXT    NOT NULL   ,
	content_creation_date DATE  DEFAULT curdate()  NOT NULL   ,
	content_title        VARCHAR(100)       ,
	moderation_status    ENUM('pending', 'approved', 'rejected')  DEFAULT 'pending'     
 ) engine=InnoDB;

CREATE  TABLE cosn.content_link_relationship ( 
	content_link_rel_id  INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	origin_content_id    INT UNSIGNED      ,
	target_content_id    INT UNSIGNED      
 ) engine=InnoDB;

CREATE INDEX fk_content_link_relationship_content ON cosn.content_link_relationship ( origin_content_id );

CREATE INDEX fk_content_link_relationship_content_0 ON cosn.content_link_relationship ( target_content_id );

CREATE  TABLE cosn.content_member_permission ( 
	content_member_permission_id INT UNSIGNED   NOT NULL   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	authorized_member_id INT UNSIGNED      ,
	content_permission_type ENUM('read','edit','comment','share','modify-permission','moderate','link')       
 ) engine=InnoDB;

CREATE INDEX fk_content_permissions_content ON cosn.content_member_permission ( target_content_id );

CREATE INDEX fk_content_permissions_members ON cosn.content_member_permission ( authorized_member_id );

CREATE  TABLE cosn.content_moderation_warning ( 
	content_moderation_warning_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED   NOT NULL   ,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	moderator_member_id  INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.content_public_permissions ( 
	content_public_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	content_public_permission_type ENUM('read','comment','share','link')       ,
	CONSTRAINT unq_content_public_permissions_target_content_id UNIQUE ( target_content_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.gift_registry ( 
	gift_registry_id     INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	organizer_member_id  INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.gift_registry_participants ( 
	gift_registry_participants_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	participant_member_id INT UNSIGNED   NOT NULL   ,
	target_gift_registry_id INT UNSIGNED   NOT NULL   ,
	CONSTRAINT unq_gift_registry_participants_participant_member_id UNIQUE ( participant_member_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.groups ( 
	group_id             INT UNSIGNED   NOT NULL   PRIMARY KEY,
	group_name           VARCHAR(100)    NOT NULL   ,
	owner_id             INT UNSIGNED      ,
	description          TEXT       ,
	creation_date        DATE  DEFAULT current_timestamp()     ,
	cathegory            VARCHAR(100)       
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX fk_groups_members ON cosn.groups ( owner_id );

CREATE  TABLE cosn.member_messages ( 
	member_message_id    INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	origin_member_id     INT UNSIGNED   NOT NULL   ,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	message_content      TEXT       ,
	CONSTRAINT unq_member_messages_origin_member_id UNIQUE ( origin_member_id ) ,
	CONSTRAINT unq_member_messages_target_member_id UNIQUE ( target_member_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.member_privilege_change_request ( 
	member_privilege_change_request_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	requested_privilege_level ENUM('senior')       
 ) engine=InnoDB;

CREATE  TABLE cosn.member_relationships ( 
	relationship_id      INT UNSIGNED   NOT NULL   PRIMARY KEY,
	origin_member_id     INT UNSIGNED   NOT NULL   ,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	member_relationship_type ENUM('friend','family','colleague','blocked')    NOT NULL   ,
	member_relationship_status ENUM('requested','approved','rejected')       
 ) engine=InnoDB;

CREATE INDEX fk_member_relationships_members ON cosn.member_relationships ( origin_member_id );

CREATE INDEX fk_member_relationships_members_0 ON cosn.member_relationships ( target_member_id );

CREATE  TABLE cosn.content_group_permissions ( 
	content_group_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	target_group_id      INT UNSIGNED   NOT NULL   ,
	content_group_permission_type ENUM('read','comment','share','link')       
 ) engine=InnoDB;

CREATE  TABLE cosn.gift_registry_ideas ( 
	gift_registry_ideas_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_gift_registry_id INT UNSIGNED   NOT NULL   ,
	idea_owner_id        INT UNSIGNED   NOT NULL   ,
	gift_idea_description VARCHAR(200)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event ( 
	group_event_id       INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_id      INT UNSIGNED   NOT NULL   ,
	event_organizer_member_id INT UNSIGNED   NOT NULL   ,
	event_name           VARCHAR(100)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event_options ( 
	group_event_options_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_event_id INT UNSIGNED   NOT NULL   ,
	option_owner_member_id INT UNSIGNED   NOT NULL   ,
	option_description   VARCHAR(100)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_members ( 
	group_membership_id  INT UNSIGNED   NOT NULL   PRIMARY KEY,
	participant_member_id INT UNSIGNED   NOT NULL   ,
	joined_group_id      INT UNSIGNED   NOT NULL   ,
	date_joined          DATE    NOT NULL   ,
	role_of_member       ENUM('member','owner')  DEFAULT 'member'     
 ) engine=InnoDB;

CREATE INDEX fk_group_members_members ON cosn.group_members ( participant_member_id );

CREATE INDEX fk_group_members_groups ON cosn.group_members ( joined_group_id );

CREATE  TABLE cosn.group_vote_plebiscite ( 
	group_vote_plebiscite_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_member_id     INT UNSIGNED      ,
	organizer_member_id  INT UNSIGNED      ,
	target_group_id      INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_vote_plebiscite_results ( 
	group_vote_plebiscite_results_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_vote_plebiscite_id INT UNSIGNED   NOT NULL   ,
	voter_member_id      INT UNSIGNED   NOT NULL   ,
	voting_decision      BOOLEAN    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event_option_vote ( 
	group_event_option_vote_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_event_option_id INT UNSIGNED   NOT NULL   ,
	option_voter_member_id INT UNSIGNED   NOT NULL   ,
	option_voting_decision BOOLEAN       
 ) engine=InnoDB;

ALTER TABLE cosn.content ADD CONSTRAINT fk_content_members FOREIGN KEY ( creator_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_group_permissions ADD CONSTRAINT fk_content_group_permissions_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_group_permissions ADD CONSTRAINT fk_content_group_permissions_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_link_relationship ADD CONSTRAINT fk_content_link_relationship_content_1 FOREIGN KEY ( origin_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_link_relationship ADD CONSTRAINT fk_content_link_relationship_content_2 FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_member_permission ADD CONSTRAINT fk_content_permissions_members FOREIGN KEY ( authorized_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_member_permission ADD CONSTRAINT fk_content_member_permission_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_public_permissions ADD CONSTRAINT fk_content_public_permissions_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry ADD CONSTRAINT fk_gift_registry_members FOREIGN KEY ( organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_ideas ADD CONSTRAINT fk_gift_registry_ideas_gift_registry FOREIGN KEY ( target_gift_registry_id ) REFERENCES cosn.gift_registry( gift_registry_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_ideas ADD CONSTRAINT fk_gift_registry_ideas_gift_registry_participants FOREIGN KEY ( idea_owner_id ) REFERENCES cosn.gift_registry_participants( participant_member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_participants ADD CONSTRAINT fk_gift_registry_participants_members FOREIGN KEY ( participant_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_participants ADD CONSTRAINT fk_gift_registry_participants_gift_registry FOREIGN KEY ( target_gift_registry_id ) REFERENCES cosn.gift_registry( gift_registry_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event ADD CONSTRAINT fk_group_event_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event ADD CONSTRAINT fk_group_event_members FOREIGN KEY ( event_organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_option_vote ADD CONSTRAINT fk_group_event_option_vote_group_event_options FOREIGN KEY ( target_group_event_option_id ) REFERENCES cosn.group_event_options( group_event_options_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_option_vote ADD CONSTRAINT fk_group_event_option_vote_members FOREIGN KEY ( option_voter_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_options ADD CONSTRAINT fk_group_event_options_group_event FOREIGN KEY ( target_group_event_id ) REFERENCES cosn.group_event( group_event_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_options ADD CONSTRAINT fk_group_event_options_members FOREIGN KEY ( option_owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_members ADD CONSTRAINT fk_group_members_members FOREIGN KEY ( participant_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_members ADD CONSTRAINT fk_group_members_groups FOREIGN KEY ( joined_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_members FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_members_0 FOREIGN KEY ( organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite_results ADD CONSTRAINT fk_group_vote_plebiscite_results_members FOREIGN KEY ( voter_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite_results ADD CONSTRAINT fk_group_vote_plebiscite_results_group_vote_plebiscite FOREIGN KEY ( target_group_vote_plebiscite_id ) REFERENCES cosn.group_vote_plebiscite( group_vote_plebiscite_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.groups ADD CONSTRAINT fk_groups_members FOREIGN KEY ( owner_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_messages ADD CONSTRAINT fk_member_messages_members FOREIGN KEY ( origin_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_messages ADD CONSTRAINT fk_member_messages_members_0 FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_privilege_change_request ADD CONSTRAINT fk_member_privilege_change_request_members FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_relationships ADD CONSTRAINT fk_member_relationships_members FOREIGN KEY ( origin_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_relationships ADD CONSTRAINT fk_member_relationships_members_0 FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_permissions ADD CONSTRAINT fk_personal_info_visibility_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_permissions ADD CONSTRAINT fk_personal_info_visibility_members_0 FOREIGN KEY ( authorized_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_public_permissions ADD CONSTRAINT fk_personal_info_public_permissions_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.members COMMENT 'contains the info for every member of COSN';

ALTER TABLE cosn.members MODIFY member_id INT UNSIGNED NOT NULL  AUTO_INCREMENT  COMMENT 'member_id = 1 is "private" system member
member_id = 2 is "public" system member';

ALTER TABLE cosn.members MODIFY password VARCHAR(50)  NOT NULL   COMMENT 'password of the user

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY email VARCHAR(50)  NOT NULL   COMMENT 'email of the user

Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY first_name VARCHAR(100)  NOT NULL   COMMENT 'Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY last_name VARCHAR(100)  NOT NULL   COMMENT 'Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY address VARCHAR(100)     COMMENT 'address of the user.
Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY date_of_birth DATE     COMMENT 'date of birth of the user.
Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY privilege_level ENUM('administrator','senior','junior')  NOT NULL DEFAULT 'junior'  COMMENT 'privilege status of a group member (administrator, senior, junior)

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY pseudonym VARCHAR(50)     COMMENT 'name for internal interactions';

ALTER TABLE cosn.members MODIFY `status` ENUM('active','inactive','suspended')  NOT NULL DEFAULT 'active'  COMMENT 'the ''system'' status is used for internal backend representation of "public" and "private" members';

ALTER TABLE cosn.members MODIFY corporation_flag BOOLEAN  NOT NULL   COMMENT 'Defines whether the member is a corporation (corporation_flag = true) or an actual person (corporation_flag = false).';

ALTER TABLE cosn.personal_info_permissions COMMENT 'Contains the mapping for ''member-specific'' permissions (visibility) of private information.

Allows a particular piece of personal information, for a particular member, to be rendered visible to a particular set of other members. The set of other members can be constructed by the applicaton in the "shape" of a family, friends or groups, by simply inserting the needed member_id to the authorized_member_id.';

ALTER TABLE cosn.personal_info_permissions MODIFY owner_member_id INT UNSIGNED NOT NULL   COMMENT 'the membeer_id of the owner of this personal information';

ALTER TABLE cosn.personal_info_permissions MODIFY authorized_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id that is authorized to view this particular personal information, of a particular member

authorized_member_id = 1, it is visible to the "private" system member
authorized_member_id = 2, it is visible to the "public" system member';

ALTER TABLE cosn.content COMMENT 'contains the content created by members';

ALTER TABLE cosn.content MODIFY creator_id INT UNSIGNED NOT NULL   COMMENT 'member who created this particular piece of content';

ALTER TABLE cosn.content MODIFY content_type ENUM('text','image','video','comment')  NOT NULL   COMMENT 'what kind of content was produced';

ALTER TABLE cosn.content MODIFY content_data TEXT  NOT NULL   COMMENT 'text or URL link to the data of the content';

ALTER TABLE cosn.content MODIFY content_creation_date DATE  NOT NULL DEFAULT curdate()  COMMENT 'when was the content created';

ALTER TABLE cosn.content MODIFY content_title VARCHAR(100)     COMMENT 'title of the post of the content';

ALTER TABLE cosn.content MODIFY moderation_status ENUM('pending', 'approved', 'rejected')   DEFAULT 'pending'  COMMENT 'status of the piece of content in terms of moderation';

ALTER TABLE cosn.content_link_relationship COMMENT 'Describes the way that content s linked between each other such as a comment to a post';

ALTER TABLE cosn.content_link_relationship MODIFY origin_content_id INT UNSIGNED    COMMENT 'ContendID of the piece of content to which another piece of content is linked';

ALTER TABLE cosn.content_link_relationship MODIFY target_content_id INT UNSIGNED    COMMENT 'Identifies the piece of content that is linked to the origin contentID';

ALTER TABLE cosn.content_member_permission COMMENT 'allows for setting the granular permissions to a particular piece of content, targeted at a particular member';

ALTER TABLE cosn.content_member_permission MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which a particular member has a certain permission';

ALTER TABLE cosn.content_member_permission MODIFY authorized_member_id INT UNSIGNED    COMMENT 'which member_id has a specific permission to do something with a specific content_id

authorized_member_id = 1 is "private" system member
authorized_member_id = 2 is "public" system member';

ALTER TABLE cosn.content_member_permission MODIFY content_permission_type ENUM('read','edit','comment','share','modify-permission','moderate','link')     COMMENT 'the type of permission that the authorized_member_id has on this particular piece of content
can be
''read'',''edit'',''comment'',''share'',''modify-permission'',''moderate'',''link''';

ALTER TABLE cosn.content_moderation_warning COMMENT 'Contains the moderation warning for content posted by a member (if the content was "flagged" by a moderator';

ALTER TABLE cosn.content_moderation_warning MODIFY target_content_id INT UNSIGNED NOT NULL   COMMENT 'defines the particular piece of content that has been flagged by a moderator';

ALTER TABLE cosn.content_moderation_warning MODIFY owner_member_id INT UNSIGNED NOT NULL   COMMENT 'member responsible for posting a flagged content';

ALTER TABLE cosn.content_moderation_warning MODIFY moderator_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a moderator who flagged the particular piece of content';

ALTER TABLE cosn.content_public_permissions COMMENT 'Defines which content is public';

ALTER TABLE cosn.content_public_permissions MODIFY content_public_permission_id INT UNSIGNED NOT NULL  AUTO_INCREMENT  COMMENT 'The synthetic PK (surrogate key)';

ALTER TABLE cosn.content_public_permissions MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which the public has certain permission';

ALTER TABLE cosn.content_public_permissions MODIFY content_public_permission_type ENUM('read','comment','share','link')     COMMENT 'the type of permission that the public has on this particular piece of content
can be
''read'',''comment'',''share'',''link''';

ALTER TABLE cosn.gift_registry COMMENT 'Describes gift registry entity that different members can attach gift ideas to.';

ALTER TABLE cosn.gift_registry MODIFY organizer_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a particular gift registry organizer';

ALTER TABLE cosn.gift_registry_participants COMMENT 'Contains the participants of a particular gift registry';

ALTER TABLE cosn.gift_registry_participants MODIFY participant_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a participant of the registry';

ALTER TABLE cosn.gift_registry_participants MODIFY target_gift_registry_id INT UNSIGNED NOT NULL   COMMENT 'describes a particular gift registry that a member is part of';

ALTER TABLE cosn.groups COMMENT 'Contains the information about the groups, such as their description, who created them, etc';

ALTER TABLE cosn.groups MODIFY owner_id INT UNSIGNED    COMMENT 'ID of the member who created a particular group';

ALTER TABLE cosn.groups MODIFY description TEXT     COMMENT 'Description of the group, their interests, etc';

ALTER TABLE cosn.groups MODIFY creation_date DATE   DEFAULT current_timestamp()  COMMENT 'Date when group was created';

ALTER TABLE cosn.groups MODIFY cathegory VARCHAR(100)     COMMENT 'defines the different cathegories';

ALTER TABLE cosn.member_messages COMMENT 'table containing the messages that members send between each others';

ALTER TABLE cosn.member_messages MODIFY origin_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id from who the message is sent FROM';

ALTER TABLE cosn.member_messages MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'member_id that receives the message';

ALTER TABLE cosn.member_messages MODIFY message_content TEXT     COMMENT 'the actual content of the message';

ALTER TABLE cosn.member_privilege_change_request COMMENT 'Contains the privilege change request of a member, for example - a junior to senior member';

ALTER TABLE cosn.member_privilege_change_request MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'The ID of the member who is requesting the change';

ALTER TABLE cosn.member_privilege_change_request MODIFY requested_privilege_level ENUM('senior')     COMMENT 'desired privilege level for the tardet_member_id';

ALTER TABLE cosn.member_relationships COMMENT 'describes the relationships of the members, specifically if they are friends, family, colleagues or blocked';

ALTER TABLE cosn.member_relationships MODIFY origin_member_id INT UNSIGNED NOT NULL   COMMENT 'the member from whom the relationship originates';

ALTER TABLE cosn.member_relationships MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'the member to whom the origin_member is connected';

ALTER TABLE cosn.member_relationships MODIFY member_relationship_type ENUM('friend','family','colleague','blocked')  NOT NULL   COMMENT 'The type of relationship can be ''friend, ''family'', ''colleague'' or ''blocked''';

ALTER TABLE cosn.member_relationships MODIFY member_relationship_status ENUM('requested','approved','rejected')     COMMENT 'used to represent the evolution of the relationship from, specifically from a friend/family/colleage request to an actual confirmed relationship';

ALTER TABLE cosn.content_group_permissions MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which a particular group has certain permission';

ALTER TABLE cosn.content_group_permissions MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'the particular group which has a certain permission on a specific content';

ALTER TABLE cosn.content_group_permissions MODIFY content_group_permission_type ENUM('read','comment','share','link')     COMMENT 'the type of permission that a particular group has on a certain piece of content';

ALTER TABLE cosn.gift_registry_ideas COMMENT 'describes gift ideas for a particular registry';

ALTER TABLE cosn.gift_registry_ideas MODIFY target_gift_registry_id INT UNSIGNED NOT NULL   COMMENT 'describes which particular gift registry a gift idea applies to';

ALTER TABLE cosn.gift_registry_ideas MODIFY idea_owner_id INT UNSIGNED NOT NULL   COMMENT 'ID of a member proposing a particullar gift';

ALTER TABLE cosn.gift_registry_ideas MODIFY gift_idea_description VARCHAR(200)  NOT NULL   COMMENT 'description of a proposed gift';

ALTER TABLE cosn.group_event COMMENT 'contains the events organized for particular groups';

ALTER TABLE cosn.group_event MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'Group for which a particular event is organized';

ALTER TABLE cosn.group_event MODIFY event_organizer_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a member who is organizing a particular event';

ALTER TABLE cosn.group_event MODIFY event_name VARCHAR(100)  NOT NULL   COMMENT 'Name of the particular event being organized';

ALTER TABLE cosn.group_event_options COMMENT 'describes the proposed options for a particular group event';

ALTER TABLE cosn.group_event_options MODIFY target_group_event_id INT UNSIGNED NOT NULL   COMMENT 'describes a particular group event ID on which a particular time/place/date option applies';

ALTER TABLE cosn.group_event_options MODIFY option_owner_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the member proposing a particular option of date/time/place for the event';

ALTER TABLE cosn.group_event_options MODIFY option_description VARCHAR(100)  NOT NULL   COMMENT 'describes the details of the proposed option for date/time/place
Ex: "Alaska, 2025-01-01, 07:00"';

ALTER TABLE cosn.group_members COMMENT 'Mapping between members and groups, each row telling us which member belongs to which group';

ALTER TABLE cosn.group_members MODIFY participant_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id of the participant of this group';

ALTER TABLE cosn.group_members MODIFY joined_group_id INT UNSIGNED NOT NULL   COMMENT 'the ID of a particular group, that a particular member has joined';

ALTER TABLE cosn.group_members MODIFY date_joined DATE  NOT NULL   COMMENT 'the date when a particular member has joned a particular group';

ALTER TABLE cosn.group_members MODIFY role_of_member ENUM('member','owner')   DEFAULT 'member'  COMMENT 'the role of a particular member who joined a particular group, can be either ''owner'' or ''member''';

ALTER TABLE cosn.group_vote_plebiscite COMMENT 'Contains the plebiscite organized to oust a non-person (corporate) member.';

ALTER TABLE cosn.group_vote_plebiscite MODIFY target_member_id INT UNSIGNED    COMMENT 'ID of a member being ousted';

ALTER TABLE cosn.group_vote_plebiscite MODIFY organizer_member_id INT UNSIGNED    COMMENT 'ID of the organizer of the plebiscite';

ALTER TABLE cosn.group_vote_plebiscite MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'Group from which the non-person member is being ousted.';

ALTER TABLE cosn.group_vote_plebiscite_results COMMENT 'Results of the plebiscite';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY target_group_vote_plebiscite_id INT UNSIGNED NOT NULL   COMMENT 'ID of the plebiscite.';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY voter_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the voting member on this particular plebiscite';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY voting_decision BOOLEAN  NOT NULL   COMMENT 'describes the decision of a particular member in the plebiscite vote (voting decision = true, meaning in favour of ousting)';

ALTER TABLE cosn.group_event_option_vote COMMENT 'contains the voting results of a particular member for a particular event option proposed';

ALTER TABLE cosn.group_event_option_vote MODIFY target_group_event_option_id INT UNSIGNED NOT NULL   COMMENT 'ID of the option of proposed date/time/place for a particular event';

ALTER TABLE cosn.group_event_option_vote MODIFY option_voter_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the member who is voting on a particular option';

ALTER TABLE cosn.group_event_option_vote MODIFY option_voting_decision BOOLEAN     COMMENT 'describes the decision of a particular member regarding the proposed date/time/place for an event (true = support for the option)';
]]></string>
		</script>
		<script name="SQL_Editor_005" id="Editor-111f" language="SQL" >
			<string><![CDATA[CREATE SCHEMA cosn;

CREATE  TABLE cosn.members ( 
	member_id            INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	username             VARCHAR(100)    NOT NULL   ,
	password             VARCHAR(50)    NOT NULL   ,
	email                VARCHAR(50)    NOT NULL   ,
	first_name           VARCHAR(100)    NOT NULL   ,
	last_name            VARCHAR(100)    NOT NULL   ,
	address              VARCHAR(100)       ,
	date_of_birth        DATE       ,
	privilege_level      ENUM('administrator','senior','junior')  DEFAULT 'junior'  NOT NULL   ,
	pseudonym            VARCHAR(50)       ,
	`status`             ENUM('active','inactive','suspended')  DEFAULT 'active'  NOT NULL   ,
	corporation_flag     BOOLEAN    NOT NULL   
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE  TABLE cosn.personal_info_permissions ( 
	personal_info_permission_id INT UNSIGNED   NOT NULL   PRIMARY KEY,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	personal_info_type   ENUM('first_name','last_name','date_of_birth','address','pseudonym','email')    NOT NULL   ,
	authorized_member_id INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_personal_info_visibility_member ON cosn.personal_info_permissions ( owner_member_id );

CREATE INDEX fk_personal_info_visibility_member_0 ON cosn.personal_info_permissions ( authorized_member_id );

CREATE  TABLE cosn.personal_info_public_permissions ( 
	personal_info_public_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	personal_info_type   ENUM('first_name','last_name','date_of_birth','address','pseudonym','email')       
 ) engine=InnoDB;

CREATE INDEX fk_personal_info_public_permissions_members ON cosn.personal_info_public_permissions ( owner_member_id );

CREATE  TABLE cosn.content ( 
	content_id           INT UNSIGNED   NOT NULL   PRIMARY KEY,
	creator_id           INT UNSIGNED   NOT NULL   ,
	content_type         ENUM('text','image','video','comment')    NOT NULL   ,
	content_data         TEXT    NOT NULL   ,
	content_creation_date DATE  DEFAULT curdate()  NOT NULL   ,
	content_title        VARCHAR(100)       ,
	moderation_status    ENUM('pending', 'approved', 'rejected')  DEFAULT 'pending'     ,
	CONSTRAINT unq_content_creator_id UNIQUE ( creator_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.content_link_relationship ( 
	content_link_rel_id  INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	origin_content_id    INT UNSIGNED      ,
	target_content_id    INT UNSIGNED      
 ) engine=InnoDB;

CREATE INDEX fk_content_link_relationship_content ON cosn.content_link_relationship ( origin_content_id );

CREATE INDEX fk_content_link_relationship_content_0 ON cosn.content_link_relationship ( target_content_id );

CREATE  TABLE cosn.content_member_permission ( 
	content_member_permission_id INT UNSIGNED   NOT NULL   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	authorized_member_id INT UNSIGNED      ,
	content_permission_type ENUM('read','edit','comment','share','modify-permission','moderate','link')       
 ) engine=InnoDB;

CREATE INDEX fk_content_permissions_content ON cosn.content_member_permission ( target_content_id );

CREATE INDEX fk_content_permissions_members ON cosn.content_member_permission ( authorized_member_id );

CREATE  TABLE cosn.content_moderation_warning ( 
	content_moderation_warning_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED   NOT NULL   ,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	moderator_member_id  INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.content_public_permissions ( 
	content_public_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	content_public_permission_type ENUM('read','comment','share','link')       ,
	CONSTRAINT unq_content_public_permissions_target_content_id UNIQUE ( target_content_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.gift_registry ( 
	gift_registry_id     INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	organizer_member_id  INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.gift_registry_participants ( 
	gift_registry_participants_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	participant_member_id INT UNSIGNED   NOT NULL   ,
	target_gift_registry_id INT UNSIGNED   NOT NULL   ,
	CONSTRAINT unq_gift_registry_participants_participant_member_id UNIQUE ( participant_member_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.groups ( 
	group_id             INT UNSIGNED   NOT NULL   PRIMARY KEY,
	group_name           VARCHAR(100)    NOT NULL   ,
	owner_id             INT UNSIGNED      ,
	description          TEXT       ,
	creation_date        DATE  DEFAULT current_timestamp()     ,
	cathegory            VARCHAR(100)       
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX fk_groups_members ON cosn.groups ( owner_id );

CREATE  TABLE cosn.member_messages ( 
	member_message_id    INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	origin_member_id     INT UNSIGNED   NOT NULL   ,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	message_content      TEXT       ,
	CONSTRAINT unq_member_messages_origin_member_id UNIQUE ( origin_member_id ) ,
	CONSTRAINT unq_member_messages_target_member_id UNIQUE ( target_member_id ) 
 ) engine=InnoDB;

CREATE  TABLE cosn.member_privilege_change_request ( 
	member_privilege_change_request_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	requested_privilege_level ENUM('senior')       
 ) engine=InnoDB;

CREATE  TABLE cosn.member_relationships ( 
	relationship_id      INT UNSIGNED   NOT NULL   PRIMARY KEY,
	origin_member_id     INT UNSIGNED   NOT NULL   ,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	member_relationship_type ENUM('friend','family','colleague','blocked')    NOT NULL   ,
	member_relationship_status ENUM('requested','approved','rejected')       
 ) engine=InnoDB;

CREATE INDEX fk_member_relationships_members ON cosn.member_relationships ( origin_member_id );

CREATE INDEX fk_member_relationships_members_0 ON cosn.member_relationships ( target_member_id );

CREATE  TABLE cosn.content_group_permissions ( 
	content_group_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	target_group_id      INT UNSIGNED   NOT NULL   ,
	content_group_permission_type ENUM('read','comment','share','link')       
 ) engine=InnoDB;

CREATE  TABLE cosn.gift_registry_ideas ( 
	gift_registry_ideas_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_gift_registry_id INT UNSIGNED   NOT NULL   ,
	idea_owner_id        INT UNSIGNED   NOT NULL   ,
	gift_idea_description VARCHAR(200)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event ( 
	group_event_id       INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_id      INT UNSIGNED   NOT NULL   ,
	event_organizer_member_id INT UNSIGNED   NOT NULL   ,
	event_name           VARCHAR(100)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event_options ( 
	group_event_options_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_event_id INT UNSIGNED   NOT NULL   ,
	option_owner_member_id INT UNSIGNED   NOT NULL   ,
	option_description   VARCHAR(100)    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_members ( 
	group_membership_id  INT UNSIGNED   NOT NULL   PRIMARY KEY,
	participant_member_id INT UNSIGNED   NOT NULL   ,
	joined_group_id      INT UNSIGNED   NOT NULL   ,
	date_joined          DATE    NOT NULL   ,
	role_of_member       ENUM('member','owner')  DEFAULT 'member'     
 ) engine=InnoDB;

CREATE INDEX fk_group_members_members ON cosn.group_members ( participant_member_id );

CREATE INDEX fk_group_members_groups ON cosn.group_members ( joined_group_id );

CREATE  TABLE cosn.group_vote_plebiscite ( 
	group_vote_plebiscite_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_member_id     INT UNSIGNED      ,
	organizer_member_id  INT UNSIGNED      ,
	target_group_id      INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_vote_plebiscite_results ( 
	group_vote_plebiscite_results_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_vote_plebiscite_id INT UNSIGNED   NOT NULL   ,
	voter_member_id      INT UNSIGNED   NOT NULL   ,
	voting_decision      BOOLEAN    NOT NULL   
 ) engine=InnoDB;

CREATE  TABLE cosn.group_event_option_vote ( 
	group_event_option_vote_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_event_option_id INT UNSIGNED   NOT NULL   ,
	option_voter_member_id INT UNSIGNED   NOT NULL   ,
	option_voting_decision BOOLEAN       
 ) engine=InnoDB;

ALTER TABLE cosn.content ADD CONSTRAINT fk_content_members FOREIGN KEY ( creator_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_group_permissions ADD CONSTRAINT fk_content_group_permissions_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_group_permissions ADD CONSTRAINT fk_content_group_permissions_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_link_relationship ADD CONSTRAINT fk_content_link_relationship_content_1 FOREIGN KEY ( origin_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_link_relationship ADD CONSTRAINT fk_content_link_relationship_content_2 FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_member_permission ADD CONSTRAINT fk_content_permissions_members FOREIGN KEY ( authorized_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_member_permission ADD CONSTRAINT fk_content_member_permission_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_content_0 FOREIGN KEY ( owner_member_id ) REFERENCES cosn.content( creator_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_members FOREIGN KEY ( moderator_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_public_permissions ADD CONSTRAINT fk_content_public_permissions_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry ADD CONSTRAINT fk_gift_registry_members FOREIGN KEY ( organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_ideas ADD CONSTRAINT fk_gift_registry_ideas_gift_registry FOREIGN KEY ( target_gift_registry_id ) REFERENCES cosn.gift_registry( gift_registry_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_ideas ADD CONSTRAINT fk_gift_registry_ideas_gift_registry_participants FOREIGN KEY ( idea_owner_id ) REFERENCES cosn.gift_registry_participants( participant_member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_participants ADD CONSTRAINT fk_gift_registry_participants_members FOREIGN KEY ( participant_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_participants ADD CONSTRAINT fk_gift_registry_participants_gift_registry FOREIGN KEY ( target_gift_registry_id ) REFERENCES cosn.gift_registry( gift_registry_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event ADD CONSTRAINT fk_group_event_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event ADD CONSTRAINT fk_group_event_members FOREIGN KEY ( event_organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_option_vote ADD CONSTRAINT fk_group_event_option_vote_group_event_options FOREIGN KEY ( target_group_event_option_id ) REFERENCES cosn.group_event_options( group_event_options_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_option_vote ADD CONSTRAINT fk_group_event_option_vote_members FOREIGN KEY ( option_voter_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_options ADD CONSTRAINT fk_group_event_options_group_event FOREIGN KEY ( target_group_event_id ) REFERENCES cosn.group_event( group_event_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_options ADD CONSTRAINT fk_group_event_options_members FOREIGN KEY ( option_owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_members ADD CONSTRAINT fk_group_members_members FOREIGN KEY ( participant_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_members ADD CONSTRAINT fk_group_members_groups FOREIGN KEY ( joined_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_members FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_members_0 FOREIGN KEY ( organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite_results ADD CONSTRAINT fk_group_vote_plebiscite_results_members FOREIGN KEY ( voter_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite_results ADD CONSTRAINT fk_group_vote_plebiscite_results_group_vote_plebiscite FOREIGN KEY ( target_group_vote_plebiscite_id ) REFERENCES cosn.group_vote_plebiscite( group_vote_plebiscite_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.groups ADD CONSTRAINT fk_groups_members FOREIGN KEY ( owner_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_messages ADD CONSTRAINT fk_member_messages_members FOREIGN KEY ( origin_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_messages ADD CONSTRAINT fk_member_messages_members_0 FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_privilege_change_request ADD CONSTRAINT fk_member_privilege_change_request_members FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_relationships ADD CONSTRAINT fk_member_relationships_members FOREIGN KEY ( origin_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_relationships ADD CONSTRAINT fk_member_relationships_members_0 FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_permissions ADD CONSTRAINT fk_personal_info_visibility_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_permissions ADD CONSTRAINT fk_personal_info_visibility_members_0 FOREIGN KEY ( authorized_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_public_permissions ADD CONSTRAINT fk_personal_info_public_permissions_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.members COMMENT 'contains the info for every member of COSN';

ALTER TABLE cosn.members MODIFY member_id INT UNSIGNED NOT NULL  AUTO_INCREMENT  COMMENT 'member_id = 1 is "private" system member
member_id = 2 is "public" system member';

ALTER TABLE cosn.members MODIFY password VARCHAR(50)  NOT NULL   COMMENT 'password of the user

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY email VARCHAR(50)  NOT NULL   COMMENT 'email of the user

Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY first_name VARCHAR(100)  NOT NULL   COMMENT 'Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY last_name VARCHAR(100)  NOT NULL   COMMENT 'Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY address VARCHAR(100)     COMMENT 'address of the user.
Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY date_of_birth DATE     COMMENT 'date of birth of the user.
Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY privilege_level ENUM('administrator','senior','junior')  NOT NULL DEFAULT 'junior'  COMMENT 'privilege status of a group member (administrator, senior, junior)

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY pseudonym VARCHAR(50)     COMMENT 'name for internal interactions';

ALTER TABLE cosn.members MODIFY `status` ENUM('active','inactive','suspended')  NOT NULL DEFAULT 'active'  COMMENT 'the ''system'' status is used for internal backend representation of "public" and "private" members';

ALTER TABLE cosn.members MODIFY corporation_flag BOOLEAN  NOT NULL   COMMENT 'Defines whether the member is a corporation (corporation_flag = true) or an actual person (corporation_flag = false).';

ALTER TABLE cosn.personal_info_permissions COMMENT 'Contains the mapping for ''member-specific'' permissions (visibility) of private information.

Allows a particular piece of personal information, for a particular member, to be rendered visible to a particular set of other members. The set of other members can be constructed by the applicaton in the "shape" of a family, friends or groups, by simply inserting the needed member_id to the authorized_member_id.';

ALTER TABLE cosn.personal_info_permissions MODIFY owner_member_id INT UNSIGNED NOT NULL   COMMENT 'the membeer_id of the owner of this personal information';

ALTER TABLE cosn.personal_info_permissions MODIFY authorized_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id that is authorized to view this particular personal information, of a particular member

authorized_member_id = 1, it is visible to the "private" system member
authorized_member_id = 2, it is visible to the "public" system member';

ALTER TABLE cosn.content COMMENT 'contains the content created by members';

ALTER TABLE cosn.content MODIFY creator_id INT UNSIGNED NOT NULL   COMMENT 'member who created this particular piece of content';

ALTER TABLE cosn.content MODIFY content_type ENUM('text','image','video','comment')  NOT NULL   COMMENT 'what kind of content was produced';

ALTER TABLE cosn.content MODIFY content_data TEXT  NOT NULL   COMMENT 'text or URL link to the data of the content';

ALTER TABLE cosn.content MODIFY content_creation_date DATE  NOT NULL DEFAULT curdate()  COMMENT 'when was the content created';

ALTER TABLE cosn.content MODIFY content_title VARCHAR(100)     COMMENT 'title of the post of the content';

ALTER TABLE cosn.content MODIFY moderation_status ENUM('pending', 'approved', 'rejected')   DEFAULT 'pending'  COMMENT 'status of the piece of content in terms of moderation';

ALTER TABLE cosn.content_link_relationship COMMENT 'Describes the way that content s linked between each other such as a comment to a post';

ALTER TABLE cosn.content_link_relationship MODIFY origin_content_id INT UNSIGNED    COMMENT 'ContendID of the piece of content to which another piece of content is linked';

ALTER TABLE cosn.content_link_relationship MODIFY target_content_id INT UNSIGNED    COMMENT 'Identifies the piece of content that is linked to the origin contentID';

ALTER TABLE cosn.content_member_permission COMMENT 'allows for setting the granular permissions to a particular piece of content, targeted at a particular member';

ALTER TABLE cosn.content_member_permission MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which a particular member has a certain permission';

ALTER TABLE cosn.content_member_permission MODIFY authorized_member_id INT UNSIGNED    COMMENT 'which member_id has a specific permission to do something with a specific content_id

authorized_member_id = 1 is "private" system member
authorized_member_id = 2 is "public" system member';

ALTER TABLE cosn.content_member_permission MODIFY content_permission_type ENUM('read','edit','comment','share','modify-permission','moderate','link')     COMMENT 'the type of permission that the authorized_member_id has on this particular piece of content
can be
''read'',''edit'',''comment'',''share'',''modify-permission'',''moderate'',''link''';

ALTER TABLE cosn.content_moderation_warning COMMENT 'Contains the moderation warning for content posted by a member (if the content was "flagged" by a moderator';

ALTER TABLE cosn.content_moderation_warning MODIFY target_content_id INT UNSIGNED NOT NULL   COMMENT 'defines the particular piece of content that has been flagged by a moderator';

ALTER TABLE cosn.content_moderation_warning MODIFY owner_member_id INT UNSIGNED NOT NULL   COMMENT 'member responsible for posting a flagged content';

ALTER TABLE cosn.content_moderation_warning MODIFY moderator_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a moderator who flagged the particular piece of content';

ALTER TABLE cosn.content_public_permissions COMMENT 'Defines which content is public';

ALTER TABLE cosn.content_public_permissions MODIFY content_public_permission_id INT UNSIGNED NOT NULL  AUTO_INCREMENT  COMMENT 'The synthetic PK (surrogate key)';

ALTER TABLE cosn.content_public_permissions MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which the public has certain permission';

ALTER TABLE cosn.content_public_permissions MODIFY content_public_permission_type ENUM('read','comment','share','link')     COMMENT 'the type of permission that the public has on this particular piece of content
can be
''read'',''comment'',''share'',''link''';

ALTER TABLE cosn.gift_registry COMMENT 'Describes gift registry entity that different members can attach gift ideas to.';

ALTER TABLE cosn.gift_registry MODIFY organizer_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a particular gift registry organizer';

ALTER TABLE cosn.gift_registry_participants COMMENT 'Contains the participants of a particular gift registry';

ALTER TABLE cosn.gift_registry_participants MODIFY participant_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a participant of the registry';

ALTER TABLE cosn.gift_registry_participants MODIFY target_gift_registry_id INT UNSIGNED NOT NULL   COMMENT 'describes a particular gift registry that a member is part of';

ALTER TABLE cosn.groups COMMENT 'Contains the information about the groups, such as their description, who created them, etc';

ALTER TABLE cosn.groups MODIFY owner_id INT UNSIGNED    COMMENT 'ID of the member who created a particular group';

ALTER TABLE cosn.groups MODIFY description TEXT     COMMENT 'Description of the group, their interests, etc';

ALTER TABLE cosn.groups MODIFY creation_date DATE   DEFAULT current_timestamp()  COMMENT 'Date when group was created';

ALTER TABLE cosn.groups MODIFY cathegory VARCHAR(100)     COMMENT 'defines the different cathegories';

ALTER TABLE cosn.member_messages COMMENT 'table containing the messages that members send between each others';

ALTER TABLE cosn.member_messages MODIFY origin_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id from who the message is sent FROM';

ALTER TABLE cosn.member_messages MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'member_id that receives the message';

ALTER TABLE cosn.member_messages MODIFY message_content TEXT     COMMENT 'the actual content of the message';

ALTER TABLE cosn.member_privilege_change_request COMMENT 'Contains the privilege change request of a member, for example - a junior to senior member';

ALTER TABLE cosn.member_privilege_change_request MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'The ID of the member who is requesting the change';

ALTER TABLE cosn.member_privilege_change_request MODIFY requested_privilege_level ENUM('senior')     COMMENT 'desired privilege level for the tardet_member_id';

ALTER TABLE cosn.member_relationships COMMENT 'describes the relationships of the members, specifically if they are friends, family, colleagues or blocked';

ALTER TABLE cosn.member_relationships MODIFY origin_member_id INT UNSIGNED NOT NULL   COMMENT 'the member from whom the relationship originates';

ALTER TABLE cosn.member_relationships MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'the member to whom the origin_member is connected';

ALTER TABLE cosn.member_relationships MODIFY member_relationship_type ENUM('friend','family','colleague','blocked')  NOT NULL   COMMENT 'The type of relationship can be ''friend, ''family'', ''colleague'' or ''blocked''';

ALTER TABLE cosn.member_relationships MODIFY member_relationship_status ENUM('requested','approved','rejected')     COMMENT 'used to represent the evolution of the relationship from, specifically from a friend/family/colleage request to an actual confirmed relationship';

ALTER TABLE cosn.content_group_permissions MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which a particular group has certain permission';

ALTER TABLE cosn.content_group_permissions MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'the particular group which has a certain permission on a specific content';

ALTER TABLE cosn.content_group_permissions MODIFY content_group_permission_type ENUM('read','comment','share','link')     COMMENT 'the type of permission that a particular group has on a certain piece of content';

ALTER TABLE cosn.gift_registry_ideas COMMENT 'describes gift ideas for a particular registry';

ALTER TABLE cosn.gift_registry_ideas MODIFY target_gift_registry_id INT UNSIGNED NOT NULL   COMMENT 'describes which particular gift registry a gift idea applies to';

ALTER TABLE cosn.gift_registry_ideas MODIFY idea_owner_id INT UNSIGNED NOT NULL   COMMENT 'ID of a member proposing a particullar gift';

ALTER TABLE cosn.gift_registry_ideas MODIFY gift_idea_description VARCHAR(200)  NOT NULL   COMMENT 'description of a proposed gift';

ALTER TABLE cosn.group_event COMMENT 'contains the events organized for particular groups';

ALTER TABLE cosn.group_event MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'Group for which a particular event is organized';

ALTER TABLE cosn.group_event MODIFY event_organizer_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a member who is organizing a particular event';

ALTER TABLE cosn.group_event MODIFY event_name VARCHAR(100)  NOT NULL   COMMENT 'Name of the particular event being organized';

ALTER TABLE cosn.group_event_options COMMENT 'describes the proposed options for a particular group event';

ALTER TABLE cosn.group_event_options MODIFY target_group_event_id INT UNSIGNED NOT NULL   COMMENT 'describes a particular group event ID on which a particular time/place/date option applies';

ALTER TABLE cosn.group_event_options MODIFY option_owner_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the member proposing a particular option of date/time/place for the event';

ALTER TABLE cosn.group_event_options MODIFY option_description VARCHAR(100)  NOT NULL   COMMENT 'describes the details of the proposed option for date/time/place
Ex: "Alaska, 2025-01-01, 07:00"';

ALTER TABLE cosn.group_members COMMENT 'Mapping between members and groups, each row telling us which member belongs to which group';

ALTER TABLE cosn.group_members MODIFY participant_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id of the participant of this group';

ALTER TABLE cosn.group_members MODIFY joined_group_id INT UNSIGNED NOT NULL   COMMENT 'the ID of a particular group, that a particular member has joined';

ALTER TABLE cosn.group_members MODIFY date_joined DATE  NOT NULL   COMMENT 'the date when a particular member has joned a particular group';

ALTER TABLE cosn.group_members MODIFY role_of_member ENUM('member','owner')   DEFAULT 'member'  COMMENT 'the role of a particular member who joined a particular group, can be either ''owner'' or ''member''';

ALTER TABLE cosn.group_vote_plebiscite COMMENT 'Contains the plebiscite organized to oust a non-person (corporate) member.';

ALTER TABLE cosn.group_vote_plebiscite MODIFY target_member_id INT UNSIGNED    COMMENT 'ID of a member being ousted';

ALTER TABLE cosn.group_vote_plebiscite MODIFY organizer_member_id INT UNSIGNED    COMMENT 'ID of the organizer of the plebiscite';

ALTER TABLE cosn.group_vote_plebiscite MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'Group from which the non-person member is being ousted.';

ALTER TABLE cosn.group_vote_plebiscite_results COMMENT 'Results of the plebiscite';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY target_group_vote_plebiscite_id INT UNSIGNED NOT NULL   COMMENT 'ID of the plebiscite.';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY voter_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the voting member on this particular plebiscite';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY voting_decision BOOLEAN  NOT NULL   COMMENT 'describes the decision of a particular member in the plebiscite vote (voting decision = true, meaning in favour of ousting)';

ALTER TABLE cosn.group_event_option_vote COMMENT 'contains the voting results of a particular member for a particular event option proposed';

ALTER TABLE cosn.group_event_option_vote MODIFY target_group_event_option_id INT UNSIGNED NOT NULL   COMMENT 'ID of the option of proposed date/time/place for a particular event';

ALTER TABLE cosn.group_event_option_vote MODIFY option_voter_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the member who is voting on a particular option';

ALTER TABLE cosn.group_event_option_vote MODIFY option_voting_decision BOOLEAN     COMMENT 'describes the decision of a particular member regarding the proposed date/time/place for an event (true = support for the option)';
]]></string>
		</script>
		<script name="SQL_Editor_006" id="Editor-694" language="SQL" >
			<string><![CDATA[CREATE SCHEMA cosn;

CREATE  TABLE cosn.members ( 
	member_id            INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	username             VARCHAR(100)    NOT NULL   ,
	password             VARCHAR(50)    NOT NULL   ,
	email                VARCHAR(50)    NOT NULL   ,
	first_name           VARCHAR(100)    NOT NULL   ,
	last_name            VARCHAR(100)    NOT NULL   ,
	address              VARCHAR(100)       ,
	date_of_birth        DATE       ,
	privilege_level      ENUM('administrator','senior','junior')  DEFAULT 'junior'  NOT NULL   ,
	pseudonym            VARCHAR(50)       ,
	`status`             ENUM('active','inactive','suspended')  DEFAULT 'active'  NOT NULL   ,
	corporation_flag     BOOLEAN    NOT NULL   
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE  TABLE cosn.personal_info_permissions ( 
	personal_info_permission_id INT UNSIGNED   NOT NULL   PRIMARY KEY,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	personal_info_type   ENUM('first_name','last_name','date_of_birth','address','pseudonym','email')    NOT NULL   ,
	authorized_member_id INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_personal_info_visibility_member ON cosn.personal_info_permissions ( owner_member_id );

CREATE INDEX fk_personal_info_visibility_member_0 ON cosn.personal_info_permissions ( authorized_member_id );

CREATE  TABLE cosn.personal_info_public_permissions ( 
	personal_info_public_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	personal_info_type   ENUM('first_name','last_name','date_of_birth','address','pseudonym','email')       
 ) engine=InnoDB;

CREATE INDEX fk_personal_info_public_permissions_members ON cosn.personal_info_public_permissions ( owner_member_id );

CREATE  TABLE cosn.content ( 
	content_id           INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	creator_id           INT UNSIGNED   NOT NULL   ,
	content_type         ENUM('text','image','video','comment')    NOT NULL   ,
	content_data         TEXT    NOT NULL   ,
	content_creation_date DATE  DEFAULT curdate()  NOT NULL   ,
	content_title        VARCHAR(100)       ,
	moderation_status    ENUM('pending', 'approved', 'rejected')  DEFAULT 'pending'     
 ) engine=InnoDB;

CREATE INDEX fk_content_members ON cosn.content ( creator_id );

CREATE  TABLE cosn.content_link_relationship ( 
	content_link_rel_id  INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	origin_content_id    INT UNSIGNED      ,
	target_content_id    INT UNSIGNED      
 ) engine=InnoDB;

CREATE INDEX fk_content_link_relationship_content ON cosn.content_link_relationship ( origin_content_id );

CREATE INDEX fk_content_link_relationship_content_0 ON cosn.content_link_relationship ( target_content_id );

CREATE  TABLE cosn.content_member_permission ( 
	content_member_permission_id INT UNSIGNED   NOT NULL   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	authorized_member_id INT UNSIGNED      ,
	content_permission_type ENUM('read','edit','comment','share','modify-permission','moderate','link')       
 ) engine=InnoDB;

CREATE INDEX fk_content_permissions_content ON cosn.content_member_permission ( target_content_id );

CREATE INDEX fk_content_permissions_members ON cosn.content_member_permission ( authorized_member_id );

CREATE  TABLE cosn.content_moderation_warning ( 
	content_moderation_warning_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED   NOT NULL   ,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	moderator_member_id  INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_content_moderation_warning_content ON cosn.content_moderation_warning ( target_content_id );

CREATE INDEX fk_content_moderation_warning_content_0 ON cosn.content_moderation_warning ( owner_member_id );

CREATE INDEX fk_content_moderation_warning_members ON cosn.content_moderation_warning ( moderator_member_id );

CREATE  TABLE cosn.content_public_permissions ( 
	content_public_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	content_public_permission_type ENUM('read','comment','share','link')       
 ) engine=InnoDB;

CREATE INDEX fk_content_public_permissions_content ON cosn.content_public_permissions ( target_content_id );

CREATE  TABLE cosn.gift_registry ( 
	gift_registry_id     INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	organizer_member_id  INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_gift_registry_members ON cosn.gift_registry ( organizer_member_id );

CREATE  TABLE cosn.gift_registry_ideas ( 
	gift_registry_ideas_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_gift_registry_id INT UNSIGNED   NOT NULL   ,
	idea_owner_id        INT UNSIGNED   NOT NULL   ,
	gift_idea_description VARCHAR(200)    NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_gift_registry_ideas_gift_registry ON cosn.gift_registry_ideas ( target_gift_registry_id );

CREATE INDEX fk_gift_registry_ideas_gift_registry_participants ON cosn.gift_registry_ideas ( idea_owner_id );

CREATE  TABLE cosn.gift_registry_participants ( 
	gift_registry_participants_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	participant_member_id INT UNSIGNED   NOT NULL   ,
	target_gift_registry_id INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_gift_registry_participants_gift_registry ON cosn.gift_registry_participants ( target_gift_registry_id );

CREATE INDEX fk_gift_registry_participants_members ON cosn.gift_registry_participants ( participant_member_id );

CREATE  TABLE cosn.groups ( 
	group_id             INT UNSIGNED   NOT NULL   PRIMARY KEY,
	group_name           VARCHAR(100)    NOT NULL   ,
	owner_id             INT UNSIGNED      ,
	description          TEXT       ,
	creation_date        DATE  DEFAULT current_timestamp()     ,
	cathegory            VARCHAR(100)       
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX fk_groups_members ON cosn.groups ( owner_id );

CREATE  TABLE cosn.member_messages ( 
	member_message_id    INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	origin_member_id     INT UNSIGNED   NOT NULL   ,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	message_content      TEXT       
 ) engine=InnoDB;

CREATE INDEX fk_member_messages_members ON cosn.member_messages ( origin_member_id );

CREATE INDEX fk_member_messages_members_0 ON cosn.member_messages ( target_member_id );

CREATE  TABLE cosn.member_privilege_change_request ( 
	member_privilege_change_request_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	requested_privilege_level ENUM('senior')       
 ) engine=InnoDB;

CREATE INDEX fk_member_privilege_change_request_members ON cosn.member_privilege_change_request ( target_member_id );

CREATE  TABLE cosn.member_relationships ( 
	relationship_id      INT UNSIGNED   NOT NULL   PRIMARY KEY,
	origin_member_id     INT UNSIGNED   NOT NULL   ,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	member_relationship_type ENUM('friend','family','colleague','blocked')    NOT NULL   ,
	member_relationship_status ENUM('requested','approved','rejected')       
 ) engine=InnoDB;

CREATE INDEX fk_member_relationships_members ON cosn.member_relationships ( origin_member_id );

CREATE INDEX fk_member_relationships_members_0 ON cosn.member_relationships ( target_member_id );

CREATE  TABLE cosn.content_group_permissions ( 
	content_group_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	target_group_id      INT UNSIGNED   NOT NULL   ,
	content_group_permission_type ENUM('read','comment','share','link')       
 ) engine=InnoDB;

CREATE INDEX fk_content_group_permissions_content ON cosn.content_group_permissions ( target_content_id );

CREATE INDEX fk_content_group_permissions_groups ON cosn.content_group_permissions ( target_group_id );

CREATE  TABLE cosn.group_event ( 
	group_event_id       INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_id      INT UNSIGNED   NOT NULL   ,
	event_organizer_member_id INT UNSIGNED   NOT NULL   ,
	event_name           VARCHAR(100)    NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_group_event_groups ON cosn.group_event ( target_group_id );

CREATE INDEX fk_group_event_members ON cosn.group_event ( event_organizer_member_id );

CREATE  TABLE cosn.group_event_options ( 
	group_event_options_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_event_id INT UNSIGNED   NOT NULL   ,
	option_owner_member_id INT UNSIGNED   NOT NULL   ,
	option_description   VARCHAR(100)    NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_group_event_options_group_event ON cosn.group_event_options ( target_group_event_id );

CREATE INDEX fk_group_event_options_members ON cosn.group_event_options ( option_owner_member_id );

CREATE  TABLE cosn.group_members ( 
	group_membership_id  INT UNSIGNED   NOT NULL   PRIMARY KEY,
	participant_member_id INT UNSIGNED   NOT NULL   ,
	joined_group_id      INT UNSIGNED   NOT NULL   ,
	date_joined          DATE    NOT NULL   ,
	role_of_member       ENUM('member','owner')  DEFAULT 'member'     
 ) engine=InnoDB;

CREATE INDEX fk_group_members_members ON cosn.group_members ( participant_member_id );

CREATE INDEX fk_group_members_groups ON cosn.group_members ( joined_group_id );

CREATE  TABLE cosn.group_vote_plebiscite ( 
	group_vote_plebiscite_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_member_id     INT UNSIGNED      ,
	organizer_member_id  INT UNSIGNED      ,
	target_group_id      INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_group_vote_plebiscite_groups ON cosn.group_vote_plebiscite ( target_group_id );

CREATE INDEX fk_group_vote_plebiscite_members ON cosn.group_vote_plebiscite ( target_member_id );

CREATE INDEX fk_group_vote_plebiscite_members_0 ON cosn.group_vote_plebiscite ( organizer_member_id );

CREATE  TABLE cosn.group_vote_plebiscite_results ( 
	group_vote_plebiscite_results_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_vote_plebiscite_id INT UNSIGNED   NOT NULL   ,
	voter_member_id      INT UNSIGNED   NOT NULL   ,
	voting_decision      BOOLEAN    NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_group_vote_plebiscite_results_members ON cosn.group_vote_plebiscite_results ( voter_member_id );

CREATE INDEX fk_group_vote_plebiscite_results_group_vote_plebiscite ON cosn.group_vote_plebiscite_results ( target_group_vote_plebiscite_id );

CREATE  TABLE cosn.group_event_option_vote ( 
	group_event_option_vote_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_event_option_id INT UNSIGNED   NOT NULL   ,
	option_voter_member_id INT UNSIGNED   NOT NULL   ,
	option_voting_decision BOOLEAN       
 ) engine=InnoDB;

CREATE INDEX fk_group_event_option_vote_group_event_options ON cosn.group_event_option_vote ( target_group_event_option_id );

CREATE INDEX fk_group_event_option_vote_members ON cosn.group_event_option_vote ( option_voter_member_id );

ALTER TABLE cosn.content ADD CONSTRAINT fk_content_members FOREIGN KEY ( creator_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_group_permissions ADD CONSTRAINT fk_content_group_permissions_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_group_permissions ADD CONSTRAINT fk_content_group_permissions_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_link_relationship ADD CONSTRAINT fk_content_link_relationship_content_1 FOREIGN KEY ( origin_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_link_relationship ADD CONSTRAINT fk_content_link_relationship_content_2 FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_member_permission ADD CONSTRAINT fk_content_permissions_members FOREIGN KEY ( authorized_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_member_permission ADD CONSTRAINT fk_content_member_permission_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_content_0 FOREIGN KEY ( owner_member_id ) REFERENCES cosn.content( creator_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_members FOREIGN KEY ( moderator_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_public_permissions ADD CONSTRAINT fk_content_public_permissions_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry ADD CONSTRAINT fk_gift_registry_members FOREIGN KEY ( organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_ideas ADD CONSTRAINT fk_gift_registry_ideas_gift_registry_0 FOREIGN KEY ( target_gift_registry_id ) REFERENCES cosn.gift_registry( gift_registry_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_ideas ADD CONSTRAINT fk_gift_registry_ideas_members FOREIGN KEY ( idea_owner_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_participants ADD CONSTRAINT fk_gift_registry_participants_members FOREIGN KEY ( participant_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_participants ADD CONSTRAINT fk_gift_registry_participants_gift_registry FOREIGN KEY ( target_gift_registry_id ) REFERENCES cosn.gift_registry( gift_registry_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event ADD CONSTRAINT fk_group_event_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event ADD CONSTRAINT fk_group_event_members FOREIGN KEY ( event_organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_option_vote ADD CONSTRAINT fk_group_event_option_vote_group_event_options FOREIGN KEY ( target_group_event_option_id ) REFERENCES cosn.group_event_options( group_event_options_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_option_vote ADD CONSTRAINT fk_group_event_option_vote_members FOREIGN KEY ( option_voter_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_options ADD CONSTRAINT fk_group_event_options_group_event FOREIGN KEY ( target_group_event_id ) REFERENCES cosn.group_event( group_event_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_options ADD CONSTRAINT fk_group_event_options_members FOREIGN KEY ( option_owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_members ADD CONSTRAINT fk_group_members_members FOREIGN KEY ( participant_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_members ADD CONSTRAINT fk_group_members_groups FOREIGN KEY ( joined_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_members FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_members_0 FOREIGN KEY ( organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite_results ADD CONSTRAINT fk_group_vote_plebiscite_results_members FOREIGN KEY ( voter_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite_results ADD CONSTRAINT fk_group_vote_plebiscite_results_group_vote_plebiscite FOREIGN KEY ( target_group_vote_plebiscite_id ) REFERENCES cosn.group_vote_plebiscite( group_vote_plebiscite_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.groups ADD CONSTRAINT fk_groups_members FOREIGN KEY ( owner_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_messages ADD CONSTRAINT fk_member_messages_members FOREIGN KEY ( origin_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_messages ADD CONSTRAINT fk_member_messages_members_0 FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_privilege_change_request ADD CONSTRAINT fk_member_privilege_change_request_members FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_relationships ADD CONSTRAINT fk_member_relationships_members FOREIGN KEY ( origin_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_relationships ADD CONSTRAINT fk_member_relationships_members_0 FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_permissions ADD CONSTRAINT fk_personal_info_visibility_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_permissions ADD CONSTRAINT fk_personal_info_visibility_members_0 FOREIGN KEY ( authorized_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_public_permissions ADD CONSTRAINT fk_personal_info_public_permissions_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.members COMMENT 'contains the info for every member of COSN';

ALTER TABLE cosn.members MODIFY member_id INT UNSIGNED NOT NULL  AUTO_INCREMENT  COMMENT 'member_id = 1 is "private" system member
member_id = 2 is "public" system member';

ALTER TABLE cosn.members MODIFY password VARCHAR(50)  NOT NULL   COMMENT 'password of the user

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY email VARCHAR(50)  NOT NULL   COMMENT 'email of the user

Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY first_name VARCHAR(100)  NOT NULL   COMMENT 'Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY last_name VARCHAR(100)  NOT NULL   COMMENT 'Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY address VARCHAR(100)     COMMENT 'address of the user.
Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY date_of_birth DATE     COMMENT 'date of birth of the user.
Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY privilege_level ENUM('administrator','senior','junior')  NOT NULL DEFAULT 'junior'  COMMENT 'privilege status of a group member (administrator, senior, junior)

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY pseudonym VARCHAR(50)     COMMENT 'name for internal interactions';

ALTER TABLE cosn.members MODIFY `status` ENUM('active','inactive','suspended')  NOT NULL DEFAULT 'active'  COMMENT 'the ''system'' status is used for internal backend representation of "public" and "private" members';

ALTER TABLE cosn.members MODIFY corporation_flag BOOLEAN  NOT NULL   COMMENT 'Defines whether the member is a corporation (corporation_flag = true) or an actual person (corporation_flag = false).';

ALTER TABLE cosn.personal_info_permissions COMMENT 'Contains the mapping for ''member-specific'' permissions (visibility) of private information.

Allows a particular piece of personal information, for a particular member, to be rendered visible to a particular set of other members. The set of other members can be constructed by the applicaton in the "shape" of a family, friends or groups, by simply inserting the needed member_id to the authorized_member_id.';

ALTER TABLE cosn.personal_info_permissions MODIFY owner_member_id INT UNSIGNED NOT NULL   COMMENT 'the membeer_id of the owner of this personal information';

ALTER TABLE cosn.personal_info_permissions MODIFY authorized_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id that is authorized to view this particular personal information, of a particular member

authorized_member_id = 1, it is visible to the "private" system member
authorized_member_id = 2, it is visible to the "public" system member';

ALTER TABLE cosn.content COMMENT 'contains the content created by members';

ALTER TABLE cosn.content MODIFY creator_id INT UNSIGNED NOT NULL   COMMENT 'member who created this particular piece of content';

ALTER TABLE cosn.content MODIFY content_type ENUM('text','image','video','comment')  NOT NULL   COMMENT 'what kind of content was produced';

ALTER TABLE cosn.content MODIFY content_data TEXT  NOT NULL   COMMENT 'text or URL link to the data of the content';

ALTER TABLE cosn.content MODIFY content_creation_date DATE  NOT NULL DEFAULT curdate()  COMMENT 'when was the content created';

ALTER TABLE cosn.content MODIFY content_title VARCHAR(100)     COMMENT 'title of the post of the content';

ALTER TABLE cosn.content MODIFY moderation_status ENUM('pending', 'approved', 'rejected')   DEFAULT 'pending'  COMMENT 'status of the piece of content in terms of moderation';

ALTER TABLE cosn.content_link_relationship COMMENT 'Describes the way that content s linked between each other such as a comment to a post';

ALTER TABLE cosn.content_link_relationship MODIFY origin_content_id INT UNSIGNED    COMMENT 'ContendID of the piece of content to which another piece of content is linked';

ALTER TABLE cosn.content_link_relationship MODIFY target_content_id INT UNSIGNED    COMMENT 'Identifies the piece of content that is linked to the origin contentID';

ALTER TABLE cosn.content_member_permission COMMENT 'allows for setting the granular permissions to a particular piece of content, targeted at a particular member';

ALTER TABLE cosn.content_member_permission MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which a particular member has a certain permission';

ALTER TABLE cosn.content_member_permission MODIFY authorized_member_id INT UNSIGNED    COMMENT 'which member_id has a specific permission to do something with a specific content_id

authorized_member_id = 1 is "private" system member
authorized_member_id = 2 is "public" system member';

ALTER TABLE cosn.content_member_permission MODIFY content_permission_type ENUM('read','edit','comment','share','modify-permission','moderate','link')     COMMENT 'the type of permission that the authorized_member_id has on this particular piece of content
can be
''read'',''edit'',''comment'',''share'',''modify-permission'',''moderate'',''link''';

ALTER TABLE cosn.content_moderation_warning COMMENT 'Contains the moderation warning for content posted by a member (if the content was "flagged" by a moderator';

ALTER TABLE cosn.content_moderation_warning MODIFY target_content_id INT UNSIGNED NOT NULL   COMMENT 'defines the particular piece of content that has been flagged by a moderator';

ALTER TABLE cosn.content_moderation_warning MODIFY owner_member_id INT UNSIGNED NOT NULL   COMMENT 'member responsible for posting a flagged content';

ALTER TABLE cosn.content_moderation_warning MODIFY moderator_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a moderator who flagged the particular piece of content';

ALTER TABLE cosn.content_public_permissions COMMENT 'Defines which content is public';

ALTER TABLE cosn.content_public_permissions MODIFY content_public_permission_id INT UNSIGNED NOT NULL  AUTO_INCREMENT  COMMENT 'The synthetic PK (surrogate key)';

ALTER TABLE cosn.content_public_permissions MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which the public has certain permission';

ALTER TABLE cosn.content_public_permissions MODIFY content_public_permission_type ENUM('read','comment','share','link')     COMMENT 'the type of permission that the public has on this particular piece of content
can be
''read'',''comment'',''share'',''link''';

ALTER TABLE cosn.gift_registry COMMENT 'Describes gift registry entity that different members can attach gift ideas to.';

ALTER TABLE cosn.gift_registry MODIFY organizer_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a particular gift registry organizer';

ALTER TABLE cosn.gift_registry_ideas COMMENT 'describes gift ideas for a particular registry';

ALTER TABLE cosn.gift_registry_ideas MODIFY target_gift_registry_id INT UNSIGNED NOT NULL   COMMENT 'describes which particular gift registry a gift idea applies to';

ALTER TABLE cosn.gift_registry_ideas MODIFY idea_owner_id INT UNSIGNED NOT NULL   COMMENT 'ID of a member proposing a particullar gift';

ALTER TABLE cosn.gift_registry_ideas MODIFY gift_idea_description VARCHAR(200)  NOT NULL   COMMENT 'description of a proposed gift';

ALTER TABLE cosn.gift_registry_participants COMMENT 'Contains the participants of a particular gift registry';

ALTER TABLE cosn.gift_registry_participants MODIFY participant_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a participant of the registry';

ALTER TABLE cosn.gift_registry_participants MODIFY target_gift_registry_id INT UNSIGNED NOT NULL   COMMENT 'describes a particular gift registry that a member is part of';

ALTER TABLE cosn.groups COMMENT 'Contains the information about the groups, such as their description, who created them, etc';

ALTER TABLE cosn.groups MODIFY owner_id INT UNSIGNED    COMMENT 'ID of the member who created a particular group';

ALTER TABLE cosn.groups MODIFY description TEXT     COMMENT 'Description of the group, their interests, etc';

ALTER TABLE cosn.groups MODIFY creation_date DATE   DEFAULT current_timestamp()  COMMENT 'Date when group was created';

ALTER TABLE cosn.groups MODIFY cathegory VARCHAR(100)     COMMENT 'defines the different cathegories';

ALTER TABLE cosn.member_messages COMMENT 'table containing the messages that members send between each others';

ALTER TABLE cosn.member_messages MODIFY origin_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id from who the message is sent FROM';

ALTER TABLE cosn.member_messages MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'member_id that receives the message';

ALTER TABLE cosn.member_messages MODIFY message_content TEXT     COMMENT 'the actual content of the message';

ALTER TABLE cosn.member_privilege_change_request COMMENT 'Contains the privilege change request of a member, for example - a junior to senior member';

ALTER TABLE cosn.member_privilege_change_request MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'The ID of the member who is requesting the change';

ALTER TABLE cosn.member_privilege_change_request MODIFY requested_privilege_level ENUM('senior')     COMMENT 'desired privilege level for the tardet_member_id';

ALTER TABLE cosn.member_relationships COMMENT 'describes the relationships of the members, specifically if they are friends, family, colleagues or blocked';

ALTER TABLE cosn.member_relationships MODIFY origin_member_id INT UNSIGNED NOT NULL   COMMENT 'the member from whom the relationship originates';

ALTER TABLE cosn.member_relationships MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'the member to whom the origin_member is connected';

ALTER TABLE cosn.member_relationships MODIFY member_relationship_type ENUM('friend','family','colleague','blocked')  NOT NULL   COMMENT 'The type of relationship can be ''friend, ''family'', ''colleague'' or ''blocked''';

ALTER TABLE cosn.member_relationships MODIFY member_relationship_status ENUM('requested','approved','rejected')     COMMENT 'used to represent the evolution of the relationship from, specifically from a friend/family/colleage request to an actual confirmed relationship';

ALTER TABLE cosn.content_group_permissions MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which a particular group has certain permission';

ALTER TABLE cosn.content_group_permissions MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'the particular group which has a certain permission on a specific content';

ALTER TABLE cosn.content_group_permissions MODIFY content_group_permission_type ENUM('read','comment','share','link')     COMMENT 'the type of permission that a particular group has on a certain piece of content';

ALTER TABLE cosn.group_event COMMENT 'contains the events organized for particular groups';

ALTER TABLE cosn.group_event MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'Group for which a particular event is organized';

ALTER TABLE cosn.group_event MODIFY event_organizer_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a member who is organizing a particular event';

ALTER TABLE cosn.group_event MODIFY event_name VARCHAR(100)  NOT NULL   COMMENT 'Name of the particular event being organized';

ALTER TABLE cosn.group_event_options COMMENT 'describes the proposed options for a particular group event';

ALTER TABLE cosn.group_event_options MODIFY target_group_event_id INT UNSIGNED NOT NULL   COMMENT 'describes a particular group event ID on which a particular time/place/date option applies';

ALTER TABLE cosn.group_event_options MODIFY option_owner_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the member proposing a particular option of date/time/place for the event';

ALTER TABLE cosn.group_event_options MODIFY option_description VARCHAR(100)  NOT NULL   COMMENT 'describes the details of the proposed option for date/time/place
Ex: "Alaska, 2025-01-01, 07:00"';

ALTER TABLE cosn.group_members COMMENT 'Mapping between members and groups, each row telling us which member belongs to which group';

ALTER TABLE cosn.group_members MODIFY participant_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id of the participant of this group';

ALTER TABLE cosn.group_members MODIFY joined_group_id INT UNSIGNED NOT NULL   COMMENT 'the ID of a particular group, that a particular member has joined';

ALTER TABLE cosn.group_members MODIFY date_joined DATE  NOT NULL   COMMENT 'the date when a particular member has joned a particular group';

ALTER TABLE cosn.group_members MODIFY role_of_member ENUM('member','owner')   DEFAULT 'member'  COMMENT 'the role of a particular member who joined a particular group, can be either ''owner'' or ''member''';

ALTER TABLE cosn.group_vote_plebiscite COMMENT 'Contains the plebiscite organized to oust a non-person (corporate) member.';

ALTER TABLE cosn.group_vote_plebiscite MODIFY target_member_id INT UNSIGNED    COMMENT 'ID of a member being ousted';

ALTER TABLE cosn.group_vote_plebiscite MODIFY organizer_member_id INT UNSIGNED    COMMENT 'ID of the organizer of the plebiscite';

ALTER TABLE cosn.group_vote_plebiscite MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'Group from which the non-person member is being ousted.';

ALTER TABLE cosn.group_vote_plebiscite_results COMMENT 'Results of the plebiscite';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY target_group_vote_plebiscite_id INT UNSIGNED NOT NULL   COMMENT 'ID of the plebiscite.';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY voter_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the voting member on this particular plebiscite';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY voting_decision BOOLEAN  NOT NULL   COMMENT 'describes the decision of a particular member in the plebiscite vote (voting decision = true, meaning in favour of ousting)';

ALTER TABLE cosn.group_event_option_vote COMMENT 'contains the voting results of a particular member for a particular event option proposed';

ALTER TABLE cosn.group_event_option_vote MODIFY target_group_event_option_id INT UNSIGNED NOT NULL   COMMENT 'ID of the option of proposed date/time/place for a particular event';

ALTER TABLE cosn.group_event_option_vote MODIFY option_voter_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the member who is voting on a particular option';

ALTER TABLE cosn.group_event_option_vote MODIFY option_voting_decision BOOLEAN     COMMENT 'describes the decision of a particular member regarding the proposed date/time/place for an event (true = support for the option)';
]]></string>
		</script>
		<script name="SQL_Editor_007" id="Editor-61" language="SQL" >
			<string><![CDATA[CREATE SCHEMA cosn;

CREATE  TABLE cosn.members ( 
	member_id            INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	username             VARCHAR(100)    NOT NULL   ,
	password             VARCHAR(50)    NOT NULL   ,
	email                VARCHAR(50)    NOT NULL   ,
	first_name           VARCHAR(100)    NOT NULL   ,
	last_name            VARCHAR(100)    NOT NULL   ,
	address              VARCHAR(100)       ,
	date_of_birth        DATE       ,
	privilege_level      ENUM('administrator','senior','junior')  DEFAULT 'junior'  NOT NULL   ,
	pseudonym            VARCHAR(50)       ,
	`status`             ENUM('active','inactive','suspended')  DEFAULT 'active'  NOT NULL   ,
	corporation_flag     BOOLEAN    NOT NULL   
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE  TABLE cosn.personal_info_permissions ( 
	personal_info_permission_id INT UNSIGNED   NOT NULL   PRIMARY KEY,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	personal_info_type   ENUM('first_name','last_name','date_of_birth','address','pseudonym','email')    NOT NULL   ,
	authorized_member_id INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_personal_info_visibility_member ON cosn.personal_info_permissions ( owner_member_id );

CREATE INDEX fk_personal_info_visibility_member_0 ON cosn.personal_info_permissions ( authorized_member_id );

CREATE  TABLE cosn.personal_info_public_permissions ( 
	personal_info_public_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	personal_info_type   ENUM('first_name','last_name','date_of_birth','address','pseudonym','email')       
 ) engine=InnoDB;

CREATE INDEX fk_personal_info_public_permissions_members ON cosn.personal_info_public_permissions ( owner_member_id );

CREATE  TABLE cosn.content ( 
	content_id           INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	creator_id           INT UNSIGNED   NOT NULL   ,
	content_type         ENUM('text','image','video','comment')    NOT NULL   ,
	content_data         TEXT    NOT NULL   ,
	content_creation_date DATE  DEFAULT curdate()  NOT NULL   ,
	content_title        VARCHAR(100)       ,
	moderation_status    ENUM('pending', 'approved', 'rejected')  DEFAULT 'pending'     
 ) engine=InnoDB;

CREATE INDEX fk_content_members ON cosn.content ( creator_id );

CREATE  TABLE cosn.content_link_relationship ( 
	content_link_rel_id  INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	origin_content_id    INT UNSIGNED      ,
	target_content_id    INT UNSIGNED      
 ) engine=InnoDB;

CREATE INDEX fk_content_link_relationship_content ON cosn.content_link_relationship ( origin_content_id );

CREATE INDEX fk_content_link_relationship_content_0 ON cosn.content_link_relationship ( target_content_id );

CREATE  TABLE cosn.content_member_permission ( 
	content_member_permission_id INT UNSIGNED   NOT NULL   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	authorized_member_id INT UNSIGNED      ,
	content_permission_type ENUM('read','edit','comment','share','modify-permission','moderate','link')       
 ) engine=InnoDB;

CREATE INDEX fk_content_permissions_content ON cosn.content_member_permission ( target_content_id );

CREATE INDEX fk_content_permissions_members ON cosn.content_member_permission ( authorized_member_id );

CREATE  TABLE cosn.content_moderation_warning ( 
	content_moderation_warning_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED   NOT NULL   ,
	owner_member_id      INT UNSIGNED   NOT NULL   ,
	moderator_member_id  INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_content_moderation_warning_content ON cosn.content_moderation_warning ( target_content_id );

CREATE INDEX fk_content_moderation_warning_content_0 ON cosn.content_moderation_warning ( owner_member_id );

CREATE INDEX fk_content_moderation_warning_members ON cosn.content_moderation_warning ( moderator_member_id );

CREATE  TABLE cosn.content_public_permissions ( 
	content_public_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	content_public_permission_type ENUM('read','comment','share','link')       
 ) engine=InnoDB;

CREATE INDEX fk_content_public_permissions_content ON cosn.content_public_permissions ( target_content_id );

CREATE  TABLE cosn.gift_registry ( 
	gift_registry_id     INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	organizer_member_id  INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_gift_registry_members ON cosn.gift_registry ( organizer_member_id );

CREATE  TABLE cosn.gift_registry_ideas ( 
	gift_registry_ideas_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_gift_registry_id INT UNSIGNED   NOT NULL   ,
	idea_owner_id        INT UNSIGNED   NOT NULL   ,
	gift_idea_description VARCHAR(200)    NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_gift_registry_ideas_gift_registry ON cosn.gift_registry_ideas ( target_gift_registry_id );

CREATE INDEX fk_gift_registry_ideas_gift_registry_participants ON cosn.gift_registry_ideas ( idea_owner_id );

CREATE  TABLE cosn.gift_registry_participants ( 
	gift_registry_participants_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	participant_member_id INT UNSIGNED   NOT NULL   ,
	target_gift_registry_id INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_gift_registry_participants_gift_registry ON cosn.gift_registry_participants ( target_gift_registry_id );

CREATE INDEX fk_gift_registry_participants_members ON cosn.gift_registry_participants ( participant_member_id );

CREATE  TABLE cosn.groups ( 
	group_id             INT UNSIGNED   NOT NULL   PRIMARY KEY,
	group_name           VARCHAR(100)    NOT NULL   ,
	owner_id             INT UNSIGNED      ,
	description          TEXT       ,
	creation_date        DATE  DEFAULT current_timestamp()     ,
	cathegory            VARCHAR(100)       
 ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE INDEX fk_groups_members ON cosn.groups ( owner_id );

CREATE  TABLE cosn.member_messages ( 
	member_message_id    INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	origin_member_id     INT UNSIGNED   NOT NULL   ,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	message_content      TEXT       
 ) engine=InnoDB;

CREATE INDEX fk_member_messages_members ON cosn.member_messages ( origin_member_id );

CREATE INDEX fk_member_messages_members_0 ON cosn.member_messages ( target_member_id );

CREATE  TABLE cosn.member_privilege_change_request ( 
	member_privilege_change_request_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	requested_privilege_level ENUM('senior')       
 ) engine=InnoDB;

CREATE INDEX fk_member_privilege_change_request_members ON cosn.member_privilege_change_request ( target_member_id );

CREATE  TABLE cosn.member_relationships ( 
	relationship_id      INT UNSIGNED   NOT NULL   PRIMARY KEY,
	origin_member_id     INT UNSIGNED   NOT NULL   ,
	target_member_id     INT UNSIGNED   NOT NULL   ,
	member_relationship_type ENUM('friend','family','colleague','blocked')    NOT NULL   ,
	member_relationship_status ENUM('requested','approved','rejected')       
 ) engine=InnoDB;

CREATE INDEX fk_member_relationships_members ON cosn.member_relationships ( origin_member_id );

CREATE INDEX fk_member_relationships_members_0 ON cosn.member_relationships ( target_member_id );

CREATE  TABLE cosn.content_group_permissions ( 
	content_group_permission_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_content_id    INT UNSIGNED      ,
	target_group_id      INT UNSIGNED   NOT NULL   ,
	content_group_permission_type ENUM('read','comment','share','link')       
 ) engine=InnoDB;

CREATE INDEX fk_content_group_permissions_content ON cosn.content_group_permissions ( target_content_id );

CREATE INDEX fk_content_group_permissions_groups ON cosn.content_group_permissions ( target_group_id );

CREATE  TABLE cosn.group_event ( 
	group_event_id       INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_id      INT UNSIGNED   NOT NULL   ,
	event_organizer_member_id INT UNSIGNED   NOT NULL   ,
	event_name           VARCHAR(100)    NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_group_event_groups ON cosn.group_event ( target_group_id );

CREATE INDEX fk_group_event_members ON cosn.group_event ( event_organizer_member_id );

CREATE  TABLE cosn.group_event_options ( 
	group_event_options_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_event_id INT UNSIGNED   NOT NULL   ,
	option_owner_member_id INT UNSIGNED   NOT NULL   ,
	option_description   VARCHAR(100)    NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_group_event_options_group_event ON cosn.group_event_options ( target_group_event_id );

CREATE INDEX fk_group_event_options_members ON cosn.group_event_options ( option_owner_member_id );

CREATE  TABLE cosn.group_members ( 
	group_membership_id  INT UNSIGNED   NOT NULL   PRIMARY KEY,
	participant_member_id INT UNSIGNED   NOT NULL   ,
	joined_group_id      INT UNSIGNED   NOT NULL   ,
	date_joined          DATE    NOT NULL   ,
	role_of_member       ENUM('member','owner')  DEFAULT 'member'     
 ) engine=InnoDB;

CREATE INDEX fk_group_members_members ON cosn.group_members ( participant_member_id );

CREATE INDEX fk_group_members_groups ON cosn.group_members ( joined_group_id );

CREATE  TABLE cosn.group_vote_plebiscite ( 
	group_vote_plebiscite_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_member_id     INT UNSIGNED      ,
	organizer_member_id  INT UNSIGNED      ,
	target_group_id      INT UNSIGNED   NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_group_vote_plebiscite_groups ON cosn.group_vote_plebiscite ( target_group_id );

CREATE INDEX fk_group_vote_plebiscite_members ON cosn.group_vote_plebiscite ( target_member_id );

CREATE INDEX fk_group_vote_plebiscite_members_0 ON cosn.group_vote_plebiscite ( organizer_member_id );

CREATE  TABLE cosn.group_vote_plebiscite_results ( 
	group_vote_plebiscite_results_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_vote_plebiscite_id INT UNSIGNED   NOT NULL   ,
	voter_member_id      INT UNSIGNED   NOT NULL   ,
	voting_decision      BOOLEAN    NOT NULL   
 ) engine=InnoDB;

CREATE INDEX fk_group_vote_plebiscite_results_members ON cosn.group_vote_plebiscite_results ( voter_member_id );

CREATE INDEX fk_group_vote_plebiscite_results_group_vote_plebiscite ON cosn.group_vote_plebiscite_results ( target_group_vote_plebiscite_id );

CREATE  TABLE cosn.group_event_option_vote ( 
	group_event_option_vote_id INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	target_group_event_option_id INT UNSIGNED   NOT NULL   ,
	option_voter_member_id INT UNSIGNED   NOT NULL   ,
	option_voting_decision BOOLEAN       
 ) engine=InnoDB;

CREATE INDEX fk_group_event_option_vote_group_event_options ON cosn.group_event_option_vote ( target_group_event_option_id );

CREATE INDEX fk_group_event_option_vote_members ON cosn.group_event_option_vote ( option_voter_member_id );

ALTER TABLE cosn.content ADD CONSTRAINT fk_content_members FOREIGN KEY ( creator_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_group_permissions ADD CONSTRAINT fk_content_group_permissions_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_group_permissions ADD CONSTRAINT fk_content_group_permissions_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_link_relationship ADD CONSTRAINT fk_content_link_relationship_content_1 FOREIGN KEY ( origin_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_link_relationship ADD CONSTRAINT fk_content_link_relationship_content_2 FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_member_permission ADD CONSTRAINT fk_content_permissions_members FOREIGN KEY ( authorized_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_member_permission ADD CONSTRAINT fk_content_member_permission_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_content_0 FOREIGN KEY ( owner_member_id ) REFERENCES cosn.content( creator_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_moderation_warning ADD CONSTRAINT fk_content_moderation_warning_members FOREIGN KEY ( moderator_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content_public_permissions ADD CONSTRAINT fk_content_public_permissions_content FOREIGN KEY ( target_content_id ) REFERENCES cosn.content( content_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry ADD CONSTRAINT fk_gift_registry_members FOREIGN KEY ( organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_ideas ADD CONSTRAINT fk_gift_registry_ideas_gift_registry_0 FOREIGN KEY ( target_gift_registry_id ) REFERENCES cosn.gift_registry( gift_registry_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_ideas ADD CONSTRAINT fk_gift_registry_ideas_members FOREIGN KEY ( idea_owner_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_participants ADD CONSTRAINT fk_gift_registry_participants_members FOREIGN KEY ( participant_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.gift_registry_participants ADD CONSTRAINT fk_gift_registry_participants_gift_registry FOREIGN KEY ( target_gift_registry_id ) REFERENCES cosn.gift_registry( gift_registry_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event ADD CONSTRAINT fk_group_event_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event ADD CONSTRAINT fk_group_event_members FOREIGN KEY ( event_organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_option_vote ADD CONSTRAINT fk_group_event_option_vote_group_event_options FOREIGN KEY ( target_group_event_option_id ) REFERENCES cosn.group_event_options( group_event_options_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_option_vote ADD CONSTRAINT fk_group_event_option_vote_members FOREIGN KEY ( option_voter_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_options ADD CONSTRAINT fk_group_event_options_group_event FOREIGN KEY ( target_group_event_id ) REFERENCES cosn.group_event( group_event_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_event_options ADD CONSTRAINT fk_group_event_options_members FOREIGN KEY ( option_owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_members ADD CONSTRAINT fk_group_members_members FOREIGN KEY ( participant_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_members ADD CONSTRAINT fk_group_members_groups FOREIGN KEY ( joined_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_groups FOREIGN KEY ( target_group_id ) REFERENCES cosn.groups( group_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_members FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite ADD CONSTRAINT fk_group_vote_plebiscite_members_0 FOREIGN KEY ( organizer_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite_results ADD CONSTRAINT fk_group_vote_plebiscite_results_members FOREIGN KEY ( voter_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.group_vote_plebiscite_results ADD CONSTRAINT fk_group_vote_plebiscite_results_group_vote_plebiscite FOREIGN KEY ( target_group_vote_plebiscite_id ) REFERENCES cosn.group_vote_plebiscite( group_vote_plebiscite_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.groups ADD CONSTRAINT fk_groups_members FOREIGN KEY ( owner_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_messages ADD CONSTRAINT fk_member_messages_members FOREIGN KEY ( origin_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_messages ADD CONSTRAINT fk_member_messages_members_0 FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_privilege_change_request ADD CONSTRAINT fk_member_privilege_change_request_members FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_relationships ADD CONSTRAINT fk_member_relationships_members FOREIGN KEY ( origin_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.member_relationships ADD CONSTRAINT fk_member_relationships_members_0 FOREIGN KEY ( target_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_permissions ADD CONSTRAINT fk_personal_info_visibility_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_permissions ADD CONSTRAINT fk_personal_info_visibility_members_0 FOREIGN KEY ( authorized_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.personal_info_public_permissions ADD CONSTRAINT fk_personal_info_public_permissions_members FOREIGN KEY ( owner_member_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.members COMMENT 'contains the info for every member of COSN';

ALTER TABLE cosn.members MODIFY member_id INT UNSIGNED NOT NULL  AUTO_INCREMENT  COMMENT 'member_id = 1 is "private" system member
member_id = 2 is "public" system member';

ALTER TABLE cosn.members MODIFY password VARCHAR(50)  NOT NULL   COMMENT 'password of the user

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY email VARCHAR(50)  NOT NULL   COMMENT 'email of the user

Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY first_name VARCHAR(100)  NOT NULL   COMMENT 'Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY last_name VARCHAR(100)  NOT NULL   COMMENT 'Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY address VARCHAR(100)     COMMENT 'address of the user.
Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY date_of_birth DATE     COMMENT 'date of birth of the user.
Mandatory (not null), for identity verification purpose.';

ALTER TABLE cosn.members MODIFY privilege_level ENUM('administrator','senior','junior')  NOT NULL DEFAULT 'junior'  COMMENT 'privilege status of a group member (administrator, senior, junior)

Mandatory (not null), for enabling the correct system functionality.';

ALTER TABLE cosn.members MODIFY pseudonym VARCHAR(50)     COMMENT 'name for internal interactions';

ALTER TABLE cosn.members MODIFY `status` ENUM('active','inactive','suspended')  NOT NULL DEFAULT 'active'  COMMENT 'the ''system'' status is used for internal backend representation of "public" and "private" members';

ALTER TABLE cosn.members MODIFY corporation_flag BOOLEAN  NOT NULL   COMMENT 'Defines whether the member is a corporation (corporation_flag = true) or an actual person (corporation_flag = false).';

ALTER TABLE cosn.personal_info_permissions COMMENT 'Contains the mapping for ''member-specific'' permissions (visibility) of private information.

Allows a particular piece of personal information, for a particular member, to be rendered visible to a particular set of other members. The set of other members can be constructed by the applicaton in the "shape" of a family, friends or groups, by simply inserting the needed member_id to the authorized_member_id.';

ALTER TABLE cosn.personal_info_permissions MODIFY owner_member_id INT UNSIGNED NOT NULL   COMMENT 'the membeer_id of the owner of this personal information';

ALTER TABLE cosn.personal_info_permissions MODIFY authorized_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id that is authorized to view this particular personal information, of a particular member

authorized_member_id = 1, it is visible to the "private" system member
authorized_member_id = 2, it is visible to the "public" system member';

ALTER TABLE cosn.content COMMENT 'contains the content created by members';

ALTER TABLE cosn.content MODIFY creator_id INT UNSIGNED NOT NULL   COMMENT 'member who created this particular piece of content';

ALTER TABLE cosn.content MODIFY content_type ENUM('text','image','video','comment')  NOT NULL   COMMENT 'what kind of content was produced';

ALTER TABLE cosn.content MODIFY content_data TEXT  NOT NULL   COMMENT 'text or URL link to the data of the content';

ALTER TABLE cosn.content MODIFY content_creation_date DATE  NOT NULL DEFAULT curdate()  COMMENT 'when was the content created';

ALTER TABLE cosn.content MODIFY content_title VARCHAR(100)     COMMENT 'title of the post of the content';

ALTER TABLE cosn.content MODIFY moderation_status ENUM('pending', 'approved', 'rejected')   DEFAULT 'pending'  COMMENT 'status of the piece of content in terms of moderation';

ALTER TABLE cosn.content_link_relationship COMMENT 'Describes the way that content s linked between each other such as a comment to a post';

ALTER TABLE cosn.content_link_relationship MODIFY origin_content_id INT UNSIGNED    COMMENT 'ContendID of the piece of content to which another piece of content is linked';

ALTER TABLE cosn.content_link_relationship MODIFY target_content_id INT UNSIGNED    COMMENT 'Identifies the piece of content that is linked to the origin contentID';

ALTER TABLE cosn.content_member_permission COMMENT 'allows for setting the granular permissions to a particular piece of content, targeted at a particular member';

ALTER TABLE cosn.content_member_permission MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which a particular member has a certain permission';

ALTER TABLE cosn.content_member_permission MODIFY authorized_member_id INT UNSIGNED    COMMENT 'which member_id has a specific permission to do something with a specific content_id

authorized_member_id = 1 is "private" system member
authorized_member_id = 2 is "public" system member';

ALTER TABLE cosn.content_member_permission MODIFY content_permission_type ENUM('read','edit','comment','share','modify-permission','moderate','link')     COMMENT 'the type of permission that the authorized_member_id has on this particular piece of content
can be
''read'',''edit'',''comment'',''share'',''modify-permission'',''moderate'',''link''';

ALTER TABLE cosn.content_moderation_warning COMMENT 'Contains the moderation warning for content posted by a member (if the content was "flagged" by a moderator';

ALTER TABLE cosn.content_moderation_warning MODIFY target_content_id INT UNSIGNED NOT NULL   COMMENT 'defines the particular piece of content that has been flagged by a moderator';

ALTER TABLE cosn.content_moderation_warning MODIFY owner_member_id INT UNSIGNED NOT NULL   COMMENT 'member responsible for posting a flagged content';

ALTER TABLE cosn.content_moderation_warning MODIFY moderator_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a moderator who flagged the particular piece of content';

ALTER TABLE cosn.content_public_permissions COMMENT 'Defines which content is public';

ALTER TABLE cosn.content_public_permissions MODIFY content_public_permission_id INT UNSIGNED NOT NULL  AUTO_INCREMENT  COMMENT 'The synthetic PK (surrogate key)';

ALTER TABLE cosn.content_public_permissions MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which the public has certain permission';

ALTER TABLE cosn.content_public_permissions MODIFY content_public_permission_type ENUM('read','comment','share','link')     COMMENT 'the type of permission that the public has on this particular piece of content
can be
''read'',''comment'',''share'',''link''';

ALTER TABLE cosn.gift_registry COMMENT 'Describes gift registry entity that different members can attach gift ideas to.';

ALTER TABLE cosn.gift_registry MODIFY organizer_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a particular gift registry organizer';

ALTER TABLE cosn.gift_registry_ideas COMMENT 'describes gift ideas for a particular registry';

ALTER TABLE cosn.gift_registry_ideas MODIFY target_gift_registry_id INT UNSIGNED NOT NULL   COMMENT 'describes which particular gift registry a gift idea applies to';

ALTER TABLE cosn.gift_registry_ideas MODIFY idea_owner_id INT UNSIGNED NOT NULL   COMMENT 'ID of a member proposing a particullar gift';

ALTER TABLE cosn.gift_registry_ideas MODIFY gift_idea_description VARCHAR(200)  NOT NULL   COMMENT 'description of a proposed gift';

ALTER TABLE cosn.gift_registry_participants COMMENT 'Contains the participants of a particular gift registry';

ALTER TABLE cosn.gift_registry_participants MODIFY participant_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a participant of the registry';

ALTER TABLE cosn.gift_registry_participants MODIFY target_gift_registry_id INT UNSIGNED NOT NULL   COMMENT 'describes a particular gift registry that a member is part of';

ALTER TABLE cosn.groups COMMENT 'Contains the information about the groups, such as their description, who created them, etc';

ALTER TABLE cosn.groups MODIFY owner_id INT UNSIGNED    COMMENT 'ID of the member who created a particular group';

ALTER TABLE cosn.groups MODIFY description TEXT     COMMENT 'Description of the group, their interests, etc';

ALTER TABLE cosn.groups MODIFY creation_date DATE   DEFAULT current_timestamp()  COMMENT 'Date when group was created';

ALTER TABLE cosn.groups MODIFY cathegory VARCHAR(100)     COMMENT 'defines the different cathegories';

ALTER TABLE cosn.member_messages COMMENT 'table containing the messages that members send between each others';

ALTER TABLE cosn.member_messages MODIFY origin_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id from who the message is sent FROM';

ALTER TABLE cosn.member_messages MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'member_id that receives the message';

ALTER TABLE cosn.member_messages MODIFY message_content TEXT     COMMENT 'the actual content of the message';

ALTER TABLE cosn.member_privilege_change_request COMMENT 'Contains the privilege change request of a member, for example - a junior to senior member';

ALTER TABLE cosn.member_privilege_change_request MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'The ID of the member who is requesting the change';

ALTER TABLE cosn.member_privilege_change_request MODIFY requested_privilege_level ENUM('senior')     COMMENT 'desired privilege level for the tardet_member_id';

ALTER TABLE cosn.member_relationships COMMENT 'describes the relationships of the members, specifically if they are friends, family, colleagues or blocked';

ALTER TABLE cosn.member_relationships MODIFY origin_member_id INT UNSIGNED NOT NULL   COMMENT 'the member from whom the relationship originates';

ALTER TABLE cosn.member_relationships MODIFY target_member_id INT UNSIGNED NOT NULL   COMMENT 'the member to whom the origin_member is connected';

ALTER TABLE cosn.member_relationships MODIFY member_relationship_type ENUM('friend','family','colleague','blocked')  NOT NULL   COMMENT 'The type of relationship can be ''friend, ''family'', ''colleague'' or ''blocked''';

ALTER TABLE cosn.member_relationships MODIFY member_relationship_status ENUM('requested','approved','rejected')     COMMENT 'used to represent the evolution of the relationship from, specifically from a friend/family/colleage request to an actual confirmed relationship';

ALTER TABLE cosn.content_group_permissions MODIFY target_content_id INT UNSIGNED    COMMENT 'the specific piece of conent, defined by content_id on which a particular group has certain permission';

ALTER TABLE cosn.content_group_permissions MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'the particular group which has a certain permission on a specific content';

ALTER TABLE cosn.content_group_permissions MODIFY content_group_permission_type ENUM('read','comment','share','link')     COMMENT 'the type of permission that a particular group has on a certain piece of content';

ALTER TABLE cosn.group_event COMMENT 'contains the events organized for particular groups';

ALTER TABLE cosn.group_event MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'Group for which a particular event is organized';

ALTER TABLE cosn.group_event MODIFY event_organizer_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of a member who is organizing a particular event';

ALTER TABLE cosn.group_event MODIFY event_name VARCHAR(100)  NOT NULL   COMMENT 'Name of the particular event being organized';

ALTER TABLE cosn.group_event_options COMMENT 'describes the proposed options for a particular group event';

ALTER TABLE cosn.group_event_options MODIFY target_group_event_id INT UNSIGNED NOT NULL   COMMENT 'describes a particular group event ID on which a particular time/place/date option applies';

ALTER TABLE cosn.group_event_options MODIFY option_owner_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the member proposing a particular option of date/time/place for the event';

ALTER TABLE cosn.group_event_options MODIFY option_description VARCHAR(100)  NOT NULL   COMMENT 'describes the details of the proposed option for date/time/place
Ex: "Alaska, 2025-01-01, 07:00"';

ALTER TABLE cosn.group_members COMMENT 'Mapping between members and groups, each row telling us which member belongs to which group';

ALTER TABLE cosn.group_members MODIFY participant_member_id INT UNSIGNED NOT NULL   COMMENT 'the member_id of the participant of this group';

ALTER TABLE cosn.group_members MODIFY joined_group_id INT UNSIGNED NOT NULL   COMMENT 'the ID of a particular group, that a particular member has joined';

ALTER TABLE cosn.group_members MODIFY date_joined DATE  NOT NULL   COMMENT 'the date when a particular member has joned a particular group';

ALTER TABLE cosn.group_members MODIFY role_of_member ENUM('member','owner')   DEFAULT 'member'  COMMENT 'the role of a particular member who joined a particular group, can be either ''owner'' or ''member''';

ALTER TABLE cosn.group_vote_plebiscite COMMENT 'Contains the plebiscite organized to oust a non-person (corporate) member.';

ALTER TABLE cosn.group_vote_plebiscite MODIFY target_member_id INT UNSIGNED    COMMENT 'ID of a member being ousted';

ALTER TABLE cosn.group_vote_plebiscite MODIFY organizer_member_id INT UNSIGNED    COMMENT 'ID of the organizer of the plebiscite';

ALTER TABLE cosn.group_vote_plebiscite MODIFY target_group_id INT UNSIGNED NOT NULL   COMMENT 'Group from which the non-person member is being ousted.';

ALTER TABLE cosn.group_vote_plebiscite_results COMMENT 'Results of the plebiscite';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY target_group_vote_plebiscite_id INT UNSIGNED NOT NULL   COMMENT 'ID of the plebiscite.';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY voter_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the voting member on this particular plebiscite';

ALTER TABLE cosn.group_vote_plebiscite_results MODIFY voting_decision BOOLEAN  NOT NULL   COMMENT 'describes the decision of a particular member in the plebiscite vote (voting decision = true, meaning in favour of ousting)';

ALTER TABLE cosn.group_event_option_vote COMMENT 'contains the voting results of a particular member for a particular event option proposed';

ALTER TABLE cosn.group_event_option_vote MODIFY target_group_event_option_id INT UNSIGNED NOT NULL   COMMENT 'ID of the option of proposed date/time/place for a particular event';

ALTER TABLE cosn.group_event_option_vote MODIFY option_voter_member_id INT UNSIGNED NOT NULL   COMMENT 'ID of the member who is voting on a particular option';

ALTER TABLE cosn.group_event_option_vote MODIFY option_voting_decision BOOLEAN     COMMENT 'describes the decision of a particular member regarding the proposed date/time/place for an event (true = support for the option)';
]]></string>
		</script>
		<script name="content" id="Editor-1f96" language="SQL" >
			<string><![CDATA[-- for a member_id 777 to post a content of type 'text' into the public feed we need to insert 
-- into content table and also create a public permission in the content_public_permissions table
-- this piece of content will be posted with moderation status 'pending' and will not be visible until approved by a moderator
INSERT INTO cosn.content
	( content_id, creator_id, content_type, content_data, content_creation_date, content_title, moderation_status) 
VALUES ( 12345, 777, 'text', 'Hello', 2023-12-31, 'Greeting', 'pending' );

-- slight changes for the 'video' type of content
INSERT INTO cosn.content
	(content_id, creator_id, content_type, content_data, content_creation_date, content_title, moderation_status) 
VALUES ( 12345, 777, 'video', 'URL:path/to/video', 2023-12-31, 'Cat video', 'pending' );

-- this public permission on content_id 12345 allows the bublic to read and comment
-- same goes for 'share' and 'link'
INSERT INTO cosn.content_public_permissions
	( content_public_permission_id, target_content_id, content_public_permission_type) 
VALUES ( 98765, 12345, 'comment' );

-- to allow a member 777 whose home page is showing a public feed to see ALL the content which their public feed has access to:
SELECT
	content_id, creator_id, content_type, content_data, content_creation_date, content_title, moderation_status
FROM
	cosn.content as cont
left join content_public_permissions as contPubPerm
on cont.content_id = contPubPerm.target_content_id
where contPubPerm.content_public_permission_type is not null
;

-- in order for a member_id 777 to be able to comment on public content_id 12345 we need three things:
-- 1. check if the content_id 12345 has been created by user 777 (if yes, go to 3. right away)
-- 2. check whether user 777 has comment permission on that piece of content; if yes then:
-- 3. insert a new piece of content of type 'comment' into the content table, and a new row into content_link_relationship 
-- which defines the relationship between the newly created comment and comment it upon content_id 12345
-- query #1: (if query doesn't return anything then content 12345 is not owened by user 777)
SELECT
	content_id, creator_id, content_type, content_data, content_creation_date, content_title, moderation_status
FROM
	cosn.content as cont
where creater_id = '777' and content_id = 12345
-- query #2: (if query doesn't return anything then user 777 doesn't have the comment permission to comment on the 12345 content)
SELECT
	content_id, creator_id, content_type, content_data, content_creation_date, content_title, moderation_status
FROM
	cosn.content as cont
left join content_public_permissions as contPubPerm
on cont.content_id = contPubPerm.target_content_id
where contPubPerm.content_public_permission_type = 'comment' and content_id = 12345
;
-- query #3.1: (new comment is created and is approved by default as commnets do not need to pass moderation)
INSERT INTO cosn.content
	( content_id, creator_id, content_type, content_data, content_creation_date, content_title, moderation_status) 
VALUES ( 6789, 777, 'comment', 'Cool comment', 2024-02-03, NULL, 'approved' );
-- query #3.2: (creates a relationship between the newly created comment 6789 and the content that is being commented upon: 12345)
INSERT INTO cosn.content_link_relationship
	( content_link_rel_id, origin_content_id, target_content_id) 
VALUES ( 111, 6789, 12345 );

]]></string>
		</script>
		<script name="content_001" id="Editor-d70" language="SQL" >
			<string><![CDATA[SELECT
	content_id, creator_id, content_type, content_data, content_creation_date, content_title, moderation_status
FROM
	cosn.content t;]]></string>
		</script>
		<script name="content_002" id="Editor-6f9" language="SQL" >
			<string><![CDATA[INSERT INTO cosn.content
	( content_id, creator_id, content_type, content_data, content_creation_date, content_title, moderation_status) VALUES ( ?, ?, ?, ?, ?, ?, ? );]]></string>
		</script>
		<script name="content_003" id="Editor-183f" language="SQL" >
			<string><![CDATA[SELECT
	content_id, creator_id, content_type, content_data, content_creation_date, content_title, moderation_status
FROM
	cosn.content t;]]></string>
		</script>
		<script name="content_004" id="Editor-1f41" language="SQL" >
			<string><![CDATA[CREATE  TABLE cosn.content ( 
	content_id           INT UNSIGNED   NOT NULL AUTO_INCREMENT   PRIMARY KEY,
	creator_id           INT UNSIGNED   NOT NULL   ,
	content_type         ENUM('text','image','video','comment')    NOT NULL   ,
	content_data         TEXT    NOT NULL   ,
	content_creation_date DATE  DEFAULT curdate()  NOT NULL   ,
	content_title        VARCHAR(100)       ,
	moderation_status    ENUM('pending', 'approved', 'rejected')  DEFAULT 'pending'     
 ) engine=InnoDB;

ALTER TABLE cosn.content ADD CONSTRAINT fk_content_members FOREIGN KEY ( creator_id ) REFERENCES cosn.members( member_id ) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE cosn.content COMMENT 'contains the content created by members';

ALTER TABLE cosn.content MODIFY creator_id INT UNSIGNED NOT NULL   COMMENT 'member who created this particular piece of content';

ALTER TABLE cosn.content MODIFY content_type ENUM('text','image','video','comment')  NOT NULL   COMMENT 'what kind of content was produced';

ALTER TABLE cosn.content MODIFY content_data TEXT  NOT NULL   COMMENT 'text or URL link to the data of the content';

ALTER TABLE cosn.content MODIFY content_creation_date DATE  NOT NULL DEFAULT curdate()  COMMENT 'when was the content created';

ALTER TABLE cosn.content MODIFY content_title VARCHAR(100)     COMMENT 'title of the post of the content';

ALTER TABLE cosn.content MODIFY moderation_status ENUM('pending', 'approved', 'rejected')   DEFAULT 'pending'  COMMENT 'status of the piece of content in terms of moderation';
]]></string>
		</script>
		<script name="content_005" id="Editor-15be" language="SQL" >
			<string><![CDATA[UPDATE cosn.content SET content_data ="https://upload.wikimedia.org/wikipedia/commons/b/bf/Bucephala-albeola-010.jpg" where content_id =2 ;]]></string>
		</script>
		<script name="content_comment" id="Editor-1ff1" language="SQL" >
			<string><![CDATA[update content set content_deleted_flag = false where content_id = 10;]]></string>
		</script>
		<script name="content_public_permissions_001" id="Editor-2675" language="SQL" >
			<string><![CDATA[INSERT INTO cosn.content_public_permissions
	( content_public_permission_id, target_content_id, content_public_permission_type) VALUES ( ?, ?, ? );]]></string>
		</script>
		<script name="group_members" id="Editor-20c8" language="SQL" >
			<string><![CDATA[DELETE FROM cosn.group_members;]]></string>
		</script>
		<script name="group_members_001" id="Editor-2467" language="SQL" >
			<string><![CDATA[INSERT INTO cosn.group_members
	( group_membership_id, participant_member_id, joined_group_id, date_joined, group_member_status) VALUES ( ?, ?, ?, ?, ? );]]></string>
		</script>
		<script name="personal_info_permissions" id="Editor-8ee" language="SQL" >
			<string><![CDATA[INSERT INTO kpc353_2.personal_info_permissions
	( personal_info_permission_id, owner_member_id, personal_info_type, authorized_member_id) VALUES ( ?, ?, ?, ? );]]></string>
		</script>
		<script name="personal_info_public_permissions" id="Editor-30" language="SQL" >
			<string><![CDATA[INSERT INTO kpc353_2.personal_info_public_permissions
	( personal_info_public_permission_id, owner_member_id, personal_info_type) VALUES ( ?, ?, ? );]]></string>
		</script>
	</layout>
</project>